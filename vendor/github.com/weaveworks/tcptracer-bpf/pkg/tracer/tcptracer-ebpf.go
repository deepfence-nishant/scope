// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6f\x6c\x1c\xc7\x75\x9f\xbd\x3f\xe2\x91\x8a\x4a\x5a\xce\xd9\xd4\x25\x4e\xa9\xd8\x48\xd8\xab\x63\x93\x22\x45\x9e\xce\x8e\xc3\xca\xb5\xcd\xb0\x8a\x49\x28\x62\x42\x08\x30\x4e\xe7\x13\x25\x52\x47\x4b\x27\xde\xc9\xe4\xf2\x0c\x44\x89\xed\x42\x26\xfc\x81\xb2\x53\x94\x75\xd5\x94\x47\x51\x36\x5d\xb4\x85\x0a\x34\x10\x91\xba\x39\x21\x75\x00\x01\x0d\x0a\xa2\x70\x0b\xa2\x50\x0b\x7e\x70\x5c\xb6\x4d\x10\xb6\x76\x5d\x36\x11\x7c\xc5\xcd\xfb\xed\xed\xee\xdb\xd9\xbd\x23\xe5\xa4\x5f\x78\x80\x3c\x7a\x6f\xe6\xcd\x7b\x33\xf3\xe6\xcd\xef\xcd\x8e\xf5\x8d\xc7\x0e\x3d\xee\xd3\x34\x61\xfc\x34\xf1\x3f\xc2\xa4\xcc\xdf\xec\x93\xe6\xdf\x7b\xf0\xdf\xbd\x42\x13\xc5\xbb\x88\xf7\xa2\x10\xe2\xd7\x84\x10\xf9\x86\xf5\x52\x99\xd6\x93\x19\xc9\xcf\x47\x36\x24\x5d\x9c\xa7\x76\x75\x3e\x21\xd6\x4b\xa5\x52\xf1\x32\x68\xbf\x10\x1b\xa5\x52\xa9\x99\x29\xbd\x16\x30\xfb\xf5\x95\x69\xf0\x7f\x0f\xa5\x7e\xf7\x00\xd3\xdb\x2b\xf5\x5c\x43\x3f\xf9\x48\x8f\x43\x6f\xaf\x42\xcf\x8b\x72\xcc\x42\x84\xc5\x4e\x59\xa3\xef\x20\x7e\x2d\x72\x7e\x21\xc4\xc9\x3a\x21\x5a\x84\x10\x13\x28\x07\xeb\x7c\x1a\x97\xef\xf1\xd0\x5b\xac\x23\x3a\x5c\xf7\x0b\x1a\xd7\x59\xd0\xda\xff\x12\x5d\xc0\xb8\x7c\x18\x57\xb4\x8d\xe6\x37\x8b\x76\xfe\x27\xa5\x1d\x83\xfe\xf7\x65\x7f\xfa\x78\x48\xf2\x9f\xda\xfd\x9f\x34\x8f\xf5\x90\x7b\x6d\xad\x44\xe5\x2a\xca\x15\x94\xcb\x28\x6f\xa0\xbc\x8e\x72\x09\xe5\x55\x94\x8b\x28\xe7\x50\xce\x56\xec\xf2\x49\xbb\x46\x88\x1f\xc9\x90\x7d\x67\x9b\xb0\x0e\x93\x44\x8f\x37\xc3\xfe\x56\x6a\x17\x3d\x0f\x7e\x0b\xf8\x2d\xe0\x5f\x20\x7e\xa6\x95\xf8\x0d\x33\x44\x9f\x6b\x23\xfa\x28\xe9\xd5\x73\x31\x9a\x9f\x49\xf2\xc6\xfc\x34\xec\xeb\x23\xfb\xf4\xc9\x5e\xaa\x1f\x1f\x40\xff\x18\xcf\xf4\x55\xdb\x38\x93\xe3\x39\x59\x9f\x8a\xde\x84\x3d\x93\xa0\x69\x9e\x8a\xbf\x41\xf3\x37\x51\x4f\xeb\x9b\x7e\xed\x5d\xc9\x9f\xf0\x09\x51\xb6\x28\x1d\x7d\x0f\xfd\x64\x20\x47\xf3\x3a\x3a\x7e\x5e\xd2\xe9\xe8\x1a\xea\x8f\x4b\xfa\xa4\x8f\xfa\x49\xea\xc7\x24\xdd\xff\x0a\xf5\x9f\xd4\x47\xa8\xcc\x8e\x51\x3b\x3f\xb5\xeb\x7f\x15\xeb\x17\xc7\x3a\x45\x69\x9d\x86\xb5\xa4\x9c\xf7\xb0\xf6\x1c\xfc\xe5\x15\xf2\x63\x4d\x93\xfc\xa0\xf8\x0b\x5a\x7f\xf8\x5d\x3a\x72\x58\xca\x35\xfe\x2e\xd1\xc5\x02\xfc\x53\x13\xe2\x70\xa9\x54\x32\xd6\xb1\x98\x32\xfd\xb3\xbc\x05\x47\x0b\x24\x97\x8e\xd0\x38\x82\xe2\x3b\x18\xe7\x50\x89\xca\x5b\x54\x1f\x3d\x82\xf2\x43\xd8\x39\x82\xfa\x0d\xf8\x03\xad\xbf\xd1\x7f\xe3\x9d\x4e\x3b\x86\x60\x47\xc0\xa2\x5f\x3f\xdb\x52\x55\xee\x96\x52\xae\xb5\xaa\xdc\x11\xcb\xb8\x4d\xb9\xb6\xaa\x72\x1f\x2a\xe5\xc8\x1f\x1b\xef\x72\xb6\x1f\x41\xfb\x90\x62\x7e\xf5\xb3\xe4\xbf\xfa\x65\x9a\x2f\x95\xbe\x0d\xc5\xf8\x92\x0b\x98\xff\x3e\x8a\x07\xc9\xcb\xb4\x0e\xa9\x78\x27\xf9\xdf\xbc\xb1\x1e\x31\xa2\x0b\x1f\x62\x1d\xe3\xd4\xfe\x0a\xad\x4b\xea\xe8\xc3\xb2\x0c\x07\xd2\x36\xbf\x9b\x40\x19\xf6\x93\x5f\x7e\xdd\x27\x44\xa9\x24\x44\xd8\x77\x82\x68\x0d\xb4\x46\x7e\x6d\xc4\xa9\x7c\x64\x84\xc5\xe1\x49\x5b\x5c\xb0\x8e\x2b\x83\x71\x35\x61\x5c\x4d\x2c\x6e\xb6\xb1\x73\x62\x44\x11\x47\x83\xe2\xb0\x2c\xc3\xda\xe7\x65\x1c\x0c\x6b\x5f\x94\xf3\x53\xde\x07\x41\x59\x4f\xfb\xdf\xb0\x27\x15\x39\x02\x7b\x68\xfe\x1a\x1f\x77\xf7\x43\xef\xf5\x1a\x72\x5d\xaf\x23\x8a\xf5\x3a\x29\x30\xaf\x28\xcb\xe3\xf8\xaf\x52\xa9\x64\x8c\xe3\xa9\xa6\xf6\x8a\x9d\x9a\xb4\xef\x3a\xf6\x5b\x1b\xb3\x9f\xd6\x59\x2f\x50\x1c\x55\xf9\x9b\x75\x3f\x70\xfb\x93\x05\xf8\x49\xe4\x26\xfa\xbf\xcf\xd6\x7f\x3a\x42\x7e\xd2\xb8\xc3\xd9\xef\x87\x9e\x71\xc2\xf0\xaf\x77\xd1\xef\x1e\x66\x37\xe2\x40\xa1\xc5\xd5\xee\x0d\x4f\xbb\xe1\xaf\x91\x55\xf4\xbf\x8b\xd9\x7d\x82\xfa\xfd\x9a\xb3\xdf\x13\x9e\x76\x9f\x80\xdd\xef\xa1\x5f\x3a\x68\x93\x85\x23\xd0\xb7\xe2\xc0\x11\xb5\xf8\x65\x35\xfc\xf2\xff\x86\x9b\x9a\x39\x6e\x1a\x60\xfb\xb5\xd7\xa1\x77\xc0\x0b\xbf\xc0\x4f\xc2\x3b\x6e\x89\x5a\xe5\xca\xfb\x54\x3f\x21\x1c\xed\xbd\xf0\x99\x89\x93\x7e\x46\xe3\xa8\xe0\xa4\x9f\x12\x3d\xcf\xc7\xd1\x52\xb2\xb7\x3b\x4c\x38\x49\xfb\x57\xc2\x49\x67\x81\x93\xf6\xfe\x58\xd8\xe5\x80\x8b\x22\x38\x6f\x23\xc0\x45\xd8\x8f\xf9\x08\x70\x44\x04\x38\x22\x02\xdc\x11\x01\x2e\x8a\xcc\xa2\x9c\x41\x49\x78\xe6\x9a\x1f\x38\x29\x3e\x84\xf3\xf1\x18\xf0\x06\xe1\x24\x3d\x0b\x7c\x14\xcf\xd8\xce\x4f\x3d\x4b\xe7\x9f\x9e\x03\x1e\xea\x23\xdc\x94\x8f\x03\x57\x65\xdb\x50\x1f\x43\x3d\xf4\xc6\x81\xa3\xb2\x88\x57\xb9\x5e\xd4\xc3\xce\x38\x70\x54\x16\xf8\x28\xbe\x68\x1b\x57\x32\x07\x5c\xd4\xf7\x23\xe0\x2d\xe0\xa2\x3e\x9a\x97\xe2\x63\x34\x5f\x13\x41\xe0\xa2\xa3\xef\x10\x2e\x0a\x00\x17\xf5\xfd\x23\xfa\x01\x2e\xea\xa3\x79\x1c\xcd\x01\x17\xf5\xad\xa0\x1e\x78\x27\x00\x5c\x74\x8e\xce\x9b\xfe\x23\x58\x8f\x3e\xe0\xb4\x1c\xe1\xa5\xe4\x39\xe0\x28\xe8\xed\x87\x1d\xf9\xa3\xc6\xba\xc4\x50\xd2\xb9\x38\xe8\x7b\x53\x94\x5d\xb4\xf8\x06\xfc\xac\x4e\x88\xa5\x52\xa9\xd4\xd8\x05\xff\xb3\xc4\x89\x36\xcb\x79\xe4\x88\xfb\x05\xf4\x7b\x37\xf9\x8d\x5e\x68\x03\x8d\x7e\x2c\x7e\xdc\xc2\xf6\xe9\x90\xf2\xdc\xfa\x36\x8d\x23\x84\x73\x01\xe5\x60\xe8\x55\xe6\x8f\xd0\x03\x7f\xce\x47\xd6\x51\xae\x21\x6e\xfd\x1c\xe5\x06\xf8\xab\x88\x5b\x38\x27\xce\xd2\xfa\x72\x3c\x53\xb6\xab\xc9\x65\xfc\x21\xdb\x79\xe7\x2e\xdf\xcc\xe4\x5b\x36\x21\x6f\x95\x5b\xdf\xa4\xde\x10\x93\x5f\x53\xca\x57\xc7\x7f\x3f\xdf\x22\xfe\xdb\xd8\x24\xfe\x5b\xad\x09\x4f\xac\xba\xe2\x09\x25\xbe\x7d\x13\x7e\xf1\x1a\xc5\x13\xfd\x75\xf8\xc7\x29\x8a\x2b\xc5\x24\xc9\xf7\x5f\xa4\x52\x7f\x03\x7e\x33\x85\xb8\xb2\x88\x7c\x70\x9a\xe2\xcd\xe8\x02\xfc\xa8\x6f\x12\xf8\x71\x03\xf8\x71\x8a\xe1\xcb\xe7\x08\x2f\x6a\x8f\x90\x9d\xdf\x84\x9e\x4a\x9c\x7d\x88\xf8\xbf\x45\xb4\x89\x13\x69\x7e\x8a\x7b\x39\x7f\xbf\xa4\xf3\x7d\x21\xc4\xa5\x26\xc4\xbf\x66\x16\xcf\x7b\x6c\xfb\x5b\x2f\x0c\xd8\xf6\xb9\x75\xbe\x62\x0a\x5c\x39\x58\x4f\x07\x95\x31\x2f\x27\x35\xec\x3b\x94\xcd\xf2\xd8\x37\xf1\xd8\x3d\x7b\xe9\xc0\x19\xac\xdb\x63\x1b\x67\x35\xb9\xa7\xf6\xd2\x02\x4e\xec\xa0\xfa\xd4\x29\x5a\x17\x63\x7f\xa7\xa6\xef\x83\xfd\x34\xde\x9b\x1a\xd9\x97\x8e\xb4\x82\xdf\xcc\xf8\x51\xf0\x9b\xb0\xaf\xef\x77\x9c\xcf\x3c\xde\xb4\x29\xe3\x0d\xc6\x6f\x91\x1b\xaa\x41\x6e\x33\x38\x26\x24\xf1\x44\x8c\xad\x1b\xc5\x79\xfd\x24\xc5\x75\x7d\x24\xe3\xb0\x63\xc5\xeb\xdc\xc7\xfd\x45\xb8\x9e\x02\xb8\x0e\x7f\x1e\xd4\xae\xc8\xf3\xbc\x78\x56\xbd\x2e\x65\xfc\x5f\x27\xdb\xcd\xc9\x7e\xb8\x1f\xa5\x71\xce\xd5\x7a\x4f\x13\x06\x2e\xd4\x51\x1f\xd6\x1a\xa4\xfe\xdb\xef\xf7\x65\xac\xcf\x4b\xe8\x9f\xce\xe9\xe2\xf3\xd4\x4e\x15\x0f\xae\x2a\xe2\xcf\x68\x81\xf4\x0e\x6a\x3f\x2d\xf9\x6c\xb8\xfb\x2a\xfc\x66\x1d\xf6\xad\xa2\xbc\x55\xb2\xda\x9d\xc2\x79\xa2\x5f\x6c\xae\x59\xbf\x2d\x1e\x5d\x6c\xa9\x2a\xb7\xae\x94\x6b\xad\x2a\xb7\xaa\x8a\xb7\x17\xdb\xaa\xca\xdd\x52\xca\x21\x4e\x37\x3b\xdb\xf7\x58\xe3\xf4\xf3\xe6\x3a\x91\x9c\x11\xa7\x7b\x5c\xe3\xf4\x9a\x32\x4f\xc7\xfc\xf7\xcd\x22\x8e\xae\x23\x8e\x5e\x42\x9c\xc5\x7a\x44\x09\x97\x8d\x22\x3f\x4b\x47\xe6\xa9\xfd\x15\x5a\x97\xd4\xd1\x05\x8a\xbb\x01\x4a\x58\x9d\x79\xfa\xa3\x92\x6f\xe6\xe9\x14\x80\xcd\x38\xfb\x25\x92\x73\xdc\x57\xd2\x3e\x09\x8a\x0e\xc1\xfd\x76\xd6\xd3\x6f\x29\x6e\x5f\x03\x2e\xcf\x4f\x01\x1f\x4f\x01\x87\x4d\x5d\x75\xc4\x65\xc3\x6f\x24\x6e\xf0\xdb\xe7\xf7\x45\x69\x43\x39\x7e\xd0\xfc\xea\x97\x29\x8e\xf0\x71\xe6\xe3\xe6\x3d\xaf\x26\xfd\x96\xce\x81\x64\xe1\x2f\xe1\xc7\x47\x40\xcf\x82\x1e\x01\x7d\x09\xf4\x18\x68\x9a\xef\xe2\x6e\xb2\xe3\x26\xce\x8b\x74\x94\xce\xc3\x09\xc4\x5f\x33\x0e\x8f\x43\x6e\x01\xfd\xe4\xa8\x9c\x9a\x44\xf9\x1c\xe2\xb4\x91\x27\x00\xdf\x17\x0c\x5c\x4a\xe7\x74\x71\x01\xf3\x11\x20\x7f\x33\xce\xa3\x66\x9f\x7d\x9e\xaf\x05\xe9\x9e\xbd\x3c\x2f\x7b\x6a\x5c\x17\xbf\x25\x7f\x35\xe3\x94\x8f\xe2\x14\xda\x55\xf2\xc0\xdb\x8e\x33\xff\x5d\x6a\x50\x9e\xcf\xb3\x5b\xc3\xa9\x17\x07\x94\xf6\xa8\x70\x6a\x8f\x0a\xef\x79\xc8\x73\x9c\x3a\xbb\x09\xf9\xaa\x38\xd5\x43\x6f\x4d\x38\xb5\x86\xf8\xa7\xc4\xa9\x35\xc4\x3f\x25\x4e\xf5\x88\x7f\xab\x35\xc5\xbf\x4d\xe2\xd4\x42\x8f\x2d\xaf\xd4\xaf\xc0\x3f\x90\xaf\xf5\x87\xe1\x8f\x88\x8b\xf9\x38\xed\x1f\x7d\x01\xf8\xd4\xc8\x1b\xe7\xe1\x3f\xd1\x65\xc4\x49\xe0\xd3\xc8\xdf\xd3\xbe\x9c\x03\x3e\x6d\xa0\x3c\x34\x1c\x2c\x50\xff\x9d\xd4\x7f\x38\xf0\xc7\x92\x36\xe3\xe3\x1f\x11\x5d\x89\x8f\x7f\x48\xf1\xc6\x11\x1f\x77\xc8\xf8\x68\xdd\x7f\x57\x3d\xf7\xdf\x2b\x8e\xf3\xdf\xad\x3d\xce\x7f\x8a\x67\x95\x38\x8a\x3c\x7c\x0a\x79\xfa\xd4\xac\x23\x8e\xce\xfe\x52\xe3\xe8\x25\x5b\x1c\xd5\xb1\xdf\xf5\x79\xc4\x31\xc4\x47\xe3\x9e\xd7\x88\x77\xfa\x3c\xee\x49\xf0\x5d\xa7\xf2\xdd\xa7\xb0\xec\x12\x67\xe9\x7e\x82\xe3\xe7\xe2\x27\xa9\x4c\xd0\xb5\xa4\xbc\x4f\x90\x71\x18\x65\xba\x6f\xba\x12\x9f\x25\x9e\x8e\xbc\x8c\xf8\x3b\x83\xf2\xdb\xd0\xbb\xc8\xe2\xf0\xdc\x96\xe3\xf0\x90\x25\x0e\x07\xc5\xf7\x49\x1e\xb8\x97\xe3\x5c\xf3\x5e\xad\xad\x42\xcb\xfd\x14\x82\x9f\x8f\x6e\x12\xff\x56\xee\xbd\xee\x27\x79\xe0\xdd\x41\x2d\x2a\xfd\x2d\x7f\x8a\xf2\x86\x22\xbe\xeb\x5c\x83\x9e\xfc\x34\xad\x47\x6a\x9a\xf6\x83\x91\x9f\x16\xf1\x3d\x49\xb5\x7f\x6f\x28\xf3\x68\x63\xdf\xdf\x70\xdd\xf7\xef\x28\xf6\x7d\x7e\x9a\xfc\x2e\x3d\x3d\xe7\xd8\x0f\xb1\x4d\xe1\xec\x46\xc2\xf9\x23\x98\xbf\xd7\x5b\x59\x7e\x01\x3d\x91\xdb\xd5\xf3\x55\xef\x73\xd2\x63\xde\xe6\x94\xe7\x24\xec\x61\x76\x0f\x6a\x6b\x0c\x9f\xcf\x54\xc1\xe7\x31\x3b\x3e\x37\xbe\xa3\x79\xd8\x33\xe3\xf5\x1d\xcd\x43\x4e\x89\xcf\x8d\x7b\x14\x0f\x39\x25\x3e\x37\xee\x51\x3c\xe4\x94\xf8\xdc\xb8\x47\xd9\xe3\x6c\x1f\xb3\x9e\x4f\xaf\x9a\xeb\x69\xf7\xd3\xd8\x26\xf1\x39\xe6\x1f\xf7\xa2\x26\x3e\x5f\x60\xf8\x7c\x91\xe1\xf3\x3f\x61\xf8\xfc\x4f\x81\xcf\x69\xc3\x3a\xf1\x39\x25\xd2\xe6\xf9\x43\xfe\x67\x9c\x3f\x83\xda\x32\xd9\x6b\xf1\xdf\xb2\x5f\x05\xc5\xdf\x7c\x2c\x7e\x38\xa8\x2d\x30\xbc\x66\xdc\x93\xce\x6c\x0d\xaf\x19\xf7\x73\xcc\x1e\x15\x5e\x8b\x79\xdd\xef\x29\xe4\x39\x5e\x9b\xd9\x84\x7c\xcd\xf7\x8a\x0a\xbd\x9b\xba\x57\xf4\xd0\xeb\x79\xaf\xe8\x21\xe7\x79\xaf\xa8\xd8\x0f\xab\x35\xed\x87\x4d\xe2\xb5\x05\xf8\x85\xf1\x8e\xe2\xb2\xf1\x3d\x61\x11\xe7\x3c\xfc\x24\x0a\x5c\x50\x00\x4e\xc3\x77\x91\xd1\x39\xf8\x4d\x03\xe1\x82\x51\x7c\x67\x4e\x1f\xfd\x01\xed\x97\x37\x80\xd3\xa6\xde\xa6\xf8\xd8\x4d\xf6\xf4\x3f\x41\x65\xb8\x6e\x94\xec\xc4\xbd\x7a\xff\xe7\x0d\x3e\xbe\x3b\x03\x2d\x84\x05\x7d\x07\xf8\x7a\x10\x74\xf0\x69\x49\x0f\x06\x82\xb2\xe4\xfb\xaf\x59\x6e\x3f\xcb\xfd\xde\xa3\x74\x1f\x36\xe8\x9b\xa6\xf6\x55\xef\xf5\x5e\xac\xcc\x6f\xd0\x72\xcf\xc5\xef\xef\xf3\xd3\x3d\x95\xf3\xc9\x2f\xf7\x4b\x2f\xe6\xa9\x8d\xe1\x96\x43\xec\x1c\xc3\x77\x21\x03\x87\xcd\x53\x3c\x49\xe1\x3b\x51\x72\xfe\x2d\xd0\xc7\xb1\x0e\x34\xbf\xc5\x7b\x49\xfe\x26\xf6\x5d\x3a\x4e\xb8\xac\xb9\xce\x6e\xbf\xd1\x2e\x81\x77\x43\x13\x68\x6f\xca\x9d\x22\xfb\xf0\x3e\x25\x15\x1d\xc3\x7e\xcf\xa0\xcc\x39\x70\xe8\x80\xe2\x9e\x55\x2f\x20\xdf\x9e\x07\x3e\xbc\x8c\xfb\x68\xe0\xf0\x09\x7c\xe7\x29\xd2\x76\x70\x7c\x17\x2f\x22\x1f\x08\x0b\x9c\x73\x06\x1d\x20\xc0\x55\xa4\xcf\x65\x15\x3f\x30\xdb\xef\xb6\xd5\x27\x32\xc2\x2e\x2f\x51\x99\x1d\xf7\xc5\x3c\x70\x9f\x91\xff\xf0\x3c\xdc\x18\x9f\xeb\xb8\x76\xdb\xf5\xa6\xe2\xc6\xf9\x42\xb8\xf4\x66\x10\xf3\x8d\x77\x4c\x89\x71\xc8\x63\x1e\x4d\x7c\xfc\x1a\xf3\x97\x4b\x0e\x7c\x33\xe3\x99\x87\xbc\xf7\x11\x6f\x3f\xe7\xd9\x7e\xf5\x23\xf1\x2b\xf5\xef\x39\xe6\xdf\x0b\x36\xff\x4e\xce\x2f\x7a\xfa\xb7\x73\xbe\x4e\xb1\x7d\xb3\x35\xff\xbd\x5d\xff\x08\x8a\x6b\xbf\xd2\x79\xd4\xe7\x8d\x38\x8d\x7c\x07\xf3\x53\xf9\xbe\x3c\x8f\x38\x7d\x19\xf9\x1b\xbe\x1b\x1b\x79\x9c\x7b\x1c\xa1\x3c\xae\x59\xe6\x97\x96\x38\x82\xbc\x2c\x61\xf1\x7b\x7b\x7e\xf6\x2d\x16\x47\x5e\xc0\xfc\x5f\x40\xf9\xf2\x2f\x6d\x1d\x86\xe4\x9c\xff\x1d\xcd\x57\xe5\xbd\xa4\x81\x5f\x30\xbf\x7b\xec\xef\x1f\x8c\xf7\x0b\x3c\x4f\x0b\xd7\xd3\xfd\xa9\x75\xff\xa8\xde\x5b\x38\xf3\xb4\xb8\x2c\xcd\x3c\x2d\x46\x79\x9a\xb1\xde\xe8\x3f\x3d\x8d\xf7\x32\xd3\x1f\x00\x4f\x55\xc7\x07\x1f\x6c\x02\x57\xd4\xe1\xbd\x41\xb5\x77\x6b\xf9\x69\xe0\xd7\xe9\xf5\x9a\xf3\x44\x35\x2e\x32\xf0\xc6\x9a\x2b\xde\x50\xe5\x17\xf9\xe9\x19\xcc\xc3\x40\xcd\xf1\x4d\x9d\xbf\xed\x62\xdf\x63\xd0\x6f\xe4\x76\xfb\xfd\xca\x96\xf3\x42\xe9\xd7\x21\x7c\x37\x73\xe0\xf2\x01\xe0\xf2\x7f\x2b\xf9\x6c\xf1\x02\xef\x5d\x71\x6f\xc6\x71\x09\xbf\x67\x4d\x21\xbf\x36\xf3\x49\xef\x77\x2a\x49\xe0\xb7\x54\xf4\x6d\xec\x47\xdc\x13\x44\xe8\x9d\x87\xf9\xdd\x72\x01\xfe\x50\x3d\xdf\x5c\xf2\xc8\x37\x55\xb8\xf5\x2d\xeb\x3b\x2f\x86\x5b\xcd\x77\x64\xc0\x8f\x05\xda\x1f\xe6\x3d\xfc\x0f\x1c\xf1\x63\x51\x89\x43\x68\xfc\xc6\x79\x6c\xbc\xbb\x35\xe2\x52\xd8\xf7\x43\x8a\x6f\x96\x78\x52\x9e\xc2\x2f\xec\x06\x4e\xc5\xbd\x96\x21\x6f\xe6\x6d\xdf\x57\xae\x0b\xc5\x1b\x4d\x7c\x61\xf7\xf7\x48\xce\x12\xbf\xca\xfe\x66\xbc\x8f\xe4\xf1\xcb\xf8\x9e\x14\x14\xd3\x1f\xb3\x5f\xbd\x29\xf3\xbd\x8f\xcf\xaf\xb6\xf6\x2e\xca\xf4\xb7\x9b\xf0\x33\x23\x8f\x7c\xd7\xc5\xdf\xaa\xe7\x75\xea\x7b\xaa\xda\xf3\xba\xe5\x4d\xca\xf3\x7c\x76\xc9\x43\xde\xf0\xf7\xba\x7a\x67\x1e\x7b\xdd\x23\x5f\x33\xfd\x7e\xc5\xc5\xef\xff\xa9\x46\xbf\x37\xee\x63\x69\x3d\x06\x7d\xf8\xee\x8f\xf1\x54\xcf\x8b\xea\xe1\x97\xb4\xce\xfa\x02\xad\xf3\x60\xe0\x00\xf5\xb3\x1f\xfd\xe0\xfd\x95\xf1\xfe\x8b\xa2\x84\x25\x5f\x0a\x76\x54\xc6\x47\xfe\x07\xbc\xf2\x06\xfc\x6c\x6a\xa8\xe2\x5f\x3e\xe9\x0f\x84\x57\x52\xa7\x8e\x33\xbc\x63\xbf\x6f\x4e\xce\x23\x6e\x45\x27\x41\xbf\x03\xfa\x39\xd0\x34\x7f\x69\xdc\x43\x4f\x54\xf0\xe1\xb7\x98\x3f\x56\xc7\x25\x23\xca\xf9\x9d\xac\x12\x57\xe2\x2e\x71\xa5\x1b\x71\xe5\xbc\x4b\x5c\xe9\xa8\x12\x57\x1e\x74\xc4\x95\x01\x8f\xb8\x52\x44\x9e\xe7\xc4\xa7\x9f\x93\xed\xfb\xf1\x0e\x27\xac\xd1\x7b\x94\xfe\x47\x41\xfb\x3f\x0b\x3b\x57\x5c\xec\xfc\x4c\x15\x3b\x23\x5b\x8a\x7f\x26\x7e\xfb\x77\x92\x77\xbc\x8f\x25\x1c\x67\xe4\x89\xa9\x06\xe0\xa6\xca\x7b\xd9\x35\xc7\x39\xff\x81\xe7\x39\xdf\x20\xe9\x64\xe5\x9c\x27\x60\xc6\xf1\x9e\xf5\x7d\xcc\xda\xc7\xf2\xce\xd7\xf9\xae\xb7\x36\x5c\x79\x9f\xd2\x3e\xb7\x7c\x8e\xe3\x59\x73\x1f\x2e\xb9\xe4\x23\xd7\x2b\xfb\x2e\x60\xc1\x05\xe6\x3e\xb4\xdf\x0f\x1a\xf7\x81\xfc\xbd\xac\xf9\xbe\x9c\xf0\x44\x12\x38\xd8\xb8\xdf\x56\xc5\x61\x37\xdc\xbf\xb4\x85\xfc\x8b\xcf\x7f\xc0\xf2\x47\x04\xc4\xf6\x0f\xbf\xed\x79\x51\xff\x34\xec\x1b\xb9\x6d\xb6\xe7\xa5\xf2\xdb\x9e\x17\xf5\x4f\x43\xdc\x92\xf8\x67\x7b\x5e\x2a\xbf\xf2\xbc\xb4\x6e\xcf\x8b\xe3\x67\xec\xa3\xed\xb8\x6b\xff\x69\xdb\xe7\x91\xf2\x67\xf8\xcb\x05\xfc\x7d\xfb\x47\xbf\x27\x06\x0e\x89\x8f\x2c\xff\xff\x24\xff\xdd\x2b\x7d\x28\x28\x9a\x76\xd8\xf9\x7f\xed\x27\xfe\x3a\xe3\x1f\x06\x7f\xb1\xce\xce\xff\x24\xf8\xad\x7e\x3b\xff\x0f\x7c\xc4\x1f\x60\xed\xc7\xc1\x0f\x85\xec\xfc\x87\xc1\x6f\x63\x7a\xef\x84\x9d\xc7\x58\xfb\xf7\xa1\x37\xc3\xf8\xef\x80\x7f\x9e\xd9\x73\x18\xfd\xcf\xb1\xf6\xf7\x81\x7f\x95\xf1\xfb\xa4\x7c\xbd\x68\x63\xf6\x5f\xf4\x11\x7f\x84\xf1\x4f\x81\x2f\x58\x3f\x9d\xe0\xb7\x31\x7e\x47\x80\xf8\x3d\x8c\xff\x3b\x68\x3f\xc3\xec\xff\xae\xa4\x77\x8a\x65\xc6\xff\x04\xf8\x23\x41\x3b\xff\x25\x1f\xf1\x67\x19\xff\x69\xf0\x17\x19\xff\x7e\xf0\x97\x18\x7f\x1f\xfa\x5f\x63\x76\xde\x42\xfb\xe6\x7a\x3b\xff\x3b\x68\xbf\x68\x67\x8b\x1f\xa3\x3d\xdf\xa4\x53\xe0\x0f\x30\xfe\xa7\xe4\xfc\xec\x12\x43\x2c\xd6\xfd\xc2\x4f\xfc\x0b\x0d\x76\xfe\x4d\xf0\x57\x18\xff\xa0\xc1\x67\xfd\x07\xc0\xcf\xb0\xfe\x77\x42\xef\x22\xeb\xe7\xcf\xd0\xfe\x06\x5b\xf7\x0f\x7c\xc4\xdf\x60\x7c\x3f\xfa\x69\x65\xfd\xfc\x07\xfa\x69\xf9\x84\x9d\xff\x23\xf0\x9b\x18\xff\x8a\x8b\xfd\xbf\x6f\xd8\xcf\xf8\xf7\x82\x7f\x9e\xf1\xff\x05\x76\xae\x31\x7e\x5c\xb6\x6f\x14\x4b\x6c\x1e\x8e\xfa\x88\xdf\xc3\xc6\xf5\x9b\x01\xe2\x5f\x60\xfc\x28\xfa\x09\x31\x7f\xf8\x09\xfa\x69\x62\xfc\x6f\x82\xdf\xc2\xf8\x9f\x46\x3f\x1b\xcc\xce\xdf\x46\xfb\x01\x96\xe7\xde\x03\xfe\x31\xc6\xff\xa1\xec\xe7\x0e\xb1\x64\x67\x8b\x77\x25\xff\x4e\xc7\xbc\x05\x64\x9e\xfd\x19\xc1\x7f\x5f\x91\xf7\x8b\xbf\xee\xe0\x67\xe5\xbd\xe7\xdd\x0e\xfe\xf7\x64\x3f\xcd\x0e\xfe\x23\xb2\x9f\x4f\x3b\xf8\x8f\x49\x7c\xfc\x29\x07\x7f\x4c\xb6\xbf\xc3\xc1\xff\x67\xc9\xdf\xe5\xe0\xff\xb9\xe4\xef\x74\xf0\xff\x41\xf6\xef\x77\xf0\x9f\x91\xfc\x3a\x07\xff\x6b\xb2\x9f\x3b\x1d\xfc\x3a\xd9\xbe\xd1\xc1\xff\x2b\xc9\x0f\x3a\xf8\x5f\x95\xfc\x7a\x07\x3f\x21\xe7\x2d\xec\xe0\xbf\x2e\xe7\xed\x2e\x07\xbf\x55\xda\x73\x8f\x83\xff\x92\xec\x67\x8f\x83\xbf\x2c\xfb\x89\x38\xf8\xbd\x28\xcb\xcb\x7e\x40\x08\x11\x63\x74\x86\xd1\x57\x2d\x74\x59\x76\x23\x68\xd2\x5f\x16\x42\xcc\x84\xec\xf5\xd6\xfe\xe3\xac\xff\x38\xeb\xbf\x4c\xcf\xb1\xfe\x27\xfd\x76\x7a\xad\xce\xae\xaf\xc5\xa2\xaf\x8f\xe9\x2b\xff\x7d\x99\xd1\xad\x9a\x9d\x5e\xf5\xdb\xfb\xeb\xb5\x8c\xe7\xf1\xb2\x7e\x36\xbe\x0d\xa6\xaf\xb5\xde\x4e\x2f\x37\x98\xf4\x13\x42\xe0\x5f\x91\x30\xf5\xf5\x30\xfd\x8b\x8c\x5e\xae\xb7\xeb\xbf\xd0\x60\xd7\xbf\xd4\x60\xd7\xb7\xbe\x93\xd9\xbb\xcb\xae\x7f\x88\xe9\xbf\xc1\xf4\xb5\xf8\xec\xf4\x6c\xc0\xde\xdf\x7a\xc8\x4e\xcf\xd6\xdb\xfb\xb7\xce\xf7\x43\xe5\x7a\x0b\xfd\x30\x72\x39\x2b\x7d\x8c\xd1\xbd\x9a\xbd\x7f\xf1\x40\x6e\x78\x32\x27\xd2\xe3\xc3\xb9\xcc\xf8\x99\xa7\x87\x13\x89\xd1\xd3\xc3\xb9\x44\x2a\x9b\x4e\x24\x53\xa9\xe1\x4c\x4e\x3c\x30\x3e\x3c\x56\xa9\x7e\x90\xd7\x3e\x93\xcc\x64\x1f\x3c\x71\x7c\xf4\x74\x36\x97\x1c\x1b\x4b\x8c\x0f\xdb\xfa\xca\xa5\x32\x89\x67\xbb\x12\xa9\x33\xa7\x4f\x0f\xa7\x72\x22\xad\x66\xdb\x35\xa8\x2a\x95\x35\x5c\x4f\xa7\x5a\x4f\xa7\x97\x9e\x4e\x57\x3d\x66\x8d\x1c\x62\x2e\x95\xc9\x8d\x27\x53\xc3\xe3\x89\x6c\x2e\x99\x3b\x97\xe5\x03\xcf\x8c\x1e\xcf\x8a\xc4\xb3\xc3\xe3\xd9\xd1\x33\xa7\xad\xa6\x9d\x38\x9e\x40\x9b\x8a\x59\x16\x96\xdd\x24\x5e\xe1\xe0\x5a\x07\x96\x1d\xce\x49\x5b\x86\xb9\xe9\x66\x85\xb5\x79\x6a\xec\x4c\xd6\xd1\x94\x98\x89\xb1\xd1\xd4\xf0\xe9\x72\x6d\x36\x37\x9e\x4b\x3e\x2d\x1e\xc8\xea\xcf\x94\xcb\x43\x07\x0f\x76\x25\x0e\x94\x8b\xf6\xc4\x3e\x59\x76\x26\xda\x65\xd9\x81\xb2\x1d\x65\x57\x22\x46\xec\x18\x5a\xc7\x88\xdb\x1e\x83\x14\xaa\xdb\x51\x6f\xf0\xbb\xa9\xd9\xbe\x6e\x34\xeb\x46\xb3\x6e\x34\xeb\xae\xcc\x7e\x62\xf8\xd9\xe1\xd3\xb9\xc4\x68\xe6\xd9\x2e\xe2\x61\x79\xb2\x67\x52\x69\x0b\x37\x77\x2e\x33\x36\x9c\x19\x3d\x4e\xac\x43\x07\x0f\xee\x4f\x74\x51\xdf\x5d\x50\x05\xee\x3e\xb0\x0d\xba\x1d\x34\x95\xed\x28\xbb\x12\xfb\xa9\x7a\x3f\xa4\xf7\x43\x0a\x74\x3b\xaa\xa9\xec\x40\xd9\x5e\x2e\x9d\x86\x77\x2a\x0d\xef\x74\x1a\xde\x49\x9d\x76\x92\x2e\x50\x1d\x28\xf7\x81\xdd\xde\x09\x55\xb2\xec\x4e\x74\xa0\x59\x07\x56\x00\x74\xbb\x2c\x63\x89\x7d\xa8\xde\x87\x6a\xd0\xed\x06\xbf\x1d\xbd\xb7\xa3\x1e\x74\x3b\x68\x2a\xbb\x12\xfb\xda\x68\xa0\xfb\xf0\x2e\xf0\x76\x7f\xbb\x7c\x42\x81\x0a\x84\x18\xea\xa3\xf2\x21\x86\x07\x79\x6e\xad\xe1\x0f\x4b\xd7\xf0\x6f\xdf\x39\x7f\xfc\xca\x62\x97\xe6\x2d\x3f\xc9\xf8\x2c\xfd\x10\xf5\x9a\x50\xa0\x0b\x21\x6e\xe0\x9d\x2c\x9e\x39\xca\x6f\x37\x7e\x8b\xbc\xc1\x5f\x77\xb1\xdf\xc0\x8b\xd7\x43\xde\xfa\x7f\x22\xd4\xfa\x57\xa0\x7f\xc0\xa2\x3f\xa8\xd0\x7f\xc5\x45\xff\x24\x3a\xad\x36\xfe\x82\x8b\xfe\xd6\x5e\xbb\x9e\x16\x60\x37\xae\xff\x82\x8b\xfe\x75\x74\x3a\x50\x65\xfc\x2f\xb8\xe8\x8f\x41\xff\x31\x8b\xfe\x7a\x85\xfe\x1b\x6e\xeb\x8f\xef\xa9\x1b\x0d\xde\xfa\xdf\x76\x59\xff\x59\xe8\x9f\xb1\xe8\xdf\xa9\xd0\xff\xbe\x8b\xfe\x18\xa0\xe6\xdc\x2e\x6f\xfd\x3f\x73\xd1\xdf\xfa\x65\x2a\xcf\x5b\xf4\xef\x52\xe8\xff\x9c\xcb\xfc\xaf\x44\xa9\xbc\x5e\xef\xad\xff\xb3\x2e\xf3\xbf\x08\xfd\xd6\xf9\x6f\x54\xe8\xbf\xe4\x32\xfe\x59\xbc\x5b\xbc\x21\xbc\xf5\xcf\xba\x8c\x3f\xd4\x67\xea\x35\xca\x3b\x14\xfa\x9f\x77\xd1\x7f\x0c\xef\x27\x78\xfe\xca\xf5\x7f\xc3\x6d\xfe\xa1\xbf\xcd\xa2\xff\x4e\x85\xfe\xa3\x7e\xd2\xcf\x63\xe0\x2a\xfe\xdd\x1b\xfe\xdd\x98\xc7\xaf\x82\x4f\x2d\xbf\xd1\x5d\x9b\xfc\x69\x17\xfd\x4d\x07\x6a\x93\xff\xae\x8b\xfe\xd6\x78\x6d\xf2\x2f\xb8\xe8\xef\x79\xa8\x36\xf9\xbf\x75\xd1\x3f\xf4\x70\x6d\xf2\x3d\x42\x2d\x9f\xf9\x62\x6d\xf2\x07\x34\xb5\xfc\x85\x47\x6a\x93\xbf\xd7\x45\x7e\xee\x4b\xb5\xc9\x07\x5d\xc6\xbf\xd4\xa3\x6e\xcf\xcf\xcf\x27\x5d\xf4\xbf\xe5\x22\xcf\xe9\x30\xde\xb5\xf1\xdf\x75\xc8\x87\x2c\xf9\x63\xb7\xc5\xff\x8d\x9b\x89\xff\x0b\x00\x00\xff\xff\x7e\x5c\x3e\xd5\xd8\x56\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 22232, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

