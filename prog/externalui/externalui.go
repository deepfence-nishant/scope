// Code generated by "esc -o prog/externalui/externalui.go -pkg externalui -prefix client/build-external -include \.html$ client/build-external"; DO NOT EDIT.

package externalui

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "client/build-external/index.html",
		size:    1447,
		modtime: 1515664636,
		compressed: `
H4sIAAAAAAAC/7xUYYvcNhD9nl8xEYW0EFu+2+zd3tV2CVeXtEmzx23oUUIws9J4rYstCUm2sy3978Xr
ddhQUkpK+8njN5qnmTczSh9LI8LeEtShbfJH6fgB0aD3GdMmevAsfwSQ1oRyNADSlgKCqNF5ChnrQhWt
2NEVVGgovyfsCTbCWEr5BJ1EamwpY5K8cMoGZTQDYXQgHTLG/nqwVzRY48LJqUHJUGeSeiUoOvw8BaVV
UNhEXmBD2dlMNF0CDepdhzvK2AP2OIEsH5SWZojL8r54/ktxv757uSlvNnc/lG/WL4vXkAH7qjwByttX
z2+KF+tX3xd3Zcm+TflEdNDnaH5KWW5u1rdF+eZF8XOxgQx+2qxfx3YU7usnvzNtXIsNu2Z1CNZfc+4X
Mbb4m9E4+FiYlvuAQYl4GPWMB+Pee+5HVaNOcR/2DUVobbS8uLrcYrUUeL5cVavzhBKKhfffiWqRbM+u
kipZLpbnC7l4JpfsKRt1dOjDv7t5ZolCTS1F28urlbygi1VC5yLZrqrL5NnfJWG7baPELYb6S9Ngfzz5
5pMWNEq/h9pRlf2/ioKjJmOHaF8TBZanfF6XdGvk/jiLj6PoraqgCfBjAWfJuwkGSO28b1tnBk81Wrtn
+a+mA3QEnVd6B6gh9cEZvctNFyQGkik/AjDFuRhuG0JPkOKJDtecn/AeVGB5Z3cOJcHedG4OTznmEAyo
1jrTH330wZJTpAXFKbdzJW9JS1W9i6IjIFU/1zA4tOxjaaNDyYyhtaMsUvXHiNmcN3R8gjIW6EPgJysK
3okv7GZPWhrn44fPdC3/ODv/WQqfHaV/kBOfBifl07P8ZwAAAP//tWSm8acFAAA=
`,
	},

	"/terminal.html": {
		local:   "client/build-external/terminal.html",
		size:    1078,
		modtime: 1515664636,
		compressed: `
H4sIAAAAAAAC/7RUUWvbPBR976+4Fd/jZytplnbrZI/SZWy0rKUdK6MUcyPdxGptSUiy3ezXD8dxCYyx
MdiT5XN1j3XPOZY4VFbGjSMoY13lB6J/gKwwhIwZmzwGlh8AiJJQ9QsAUVNEkCX6QDFjTVwlr9muFHWs
KL8jbAlupXUk+ADtdRqsKWOKgvTaRW0NA2lNJBMzxn7e2GrqnPVxb1enVSwzRa2WlGxf/gdtdNRYJUFi
Rdl0JBo+AhWadYNrytgjtjiALO+0UbZLi+JucfZ1cXd1c3FbnN/efCi+XF0sPkMG7L9iDyiuL8/OFx+v
Lt8vboqCvRV8INrqU2nzBKWnVcbKGF045TzMUqzxuzXYhVTamoeIUcu06+VJO+ufAg+9SEmjeYibipJI
vtYGqwSdS/Do5Hh+MlvOiU6ms+XRsTyepjKEd3I1myynbyaryXw2P5qp2Ss1Z+CpytiWJpREkeWCj6aJ
pVWbnSKHSXKvV1BF+LSA6eRhgAGEG11fetsFKtG5Dcu/2QbQEzRBmzWgARGit2ad2yYqjKQE3wEw9PkU
rivCQCBwT5BTzvd4t3KwvHFrj4pgYxs/tguOOUQLunbetrsaPTvymoykVHA3TnJPRunVQ5LsAKXbcYbO
o2Mvo/UFrTKGzvWyKN3uOsblmJP+R8hYpOfI94ICwcu/tLUlo6wP6eMvXMtfQvTPjvD7TP3B4fiQIMGH
W+JHAAAA///HPa43NgQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "client/build-external",
	},
}
