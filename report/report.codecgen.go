// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package report

import (
	"errors"
	"fmt"
	pkg3_critbitgo "github.com/k-sone/critbitgo"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_ps "github.com/weaveworks/ps"
	pkg2_xfer "github.com/weaveworks/scope/common/xfer"
	"reflect"
	"runtime"
	time "time"
	"unsafe"
)

const (
	// ----- content types ----
	codecSelferC_UTF84018 = 1
	codecSelferC_RAW4018  = 0
	// ----- value types used ----
	codecSelferValueTypeArray4018 = 10
	codecSelferValueTypeMap4018   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey4018    = 2
	codecSelfer_containerMapValue4018  = 3
	codecSelfer_containerMapEnd4018    = 4
	codecSelfer_containerArrayElem4018 = 6
	codecSelfer_containerArrayEnd4018  = 7
)

var (
	codecSelferBitsize4018                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr4018 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelferUnsafeString4018 struct {
	Data uintptr
	Len  int
}

type codecSelfer4018 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_critbitgo.Net
		var v1 pkg1_ps.Map
		var v2 pkg2_xfer.PluginSpecs
		var v3 time.Time
		var v4 unsafe.Pointer
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.ID != ""
			yyq2[1] = x.Topology != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[5] = true
			yyq2[6] = true
			yyq2[7] = true
			yyq2[8] = true
			yyq2[9] = len(x.Metrics) != 0
			yyq2[10] = true
			yyq2[11] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.ID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("id"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.ID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Topology))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("topology"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Topology))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[2] {
					yy10 := &x.Counters
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("counters"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy12 := &x.Counters
					yy12.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					yy15 := &x.Sets
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("sets"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy17 := &x.Sets
					yy17.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Adjacency == nil {
					r.EncodeNil()
				} else {
					x.Adjacency.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("adjacency"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Adjacency == nil {
					r.EncodeNil()
				} else {
					x.Adjacency.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[5] {
					yy23 := &x.Edges
					yy23.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("edges"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy25 := &x.Edges
					yy25.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[6] {
					yy28 := &x.Controls
					yy28.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("controls"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy30 := &x.Controls
					yy30.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[7] {
					yy33 := &x.LatestControls
					yy33.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("latestControls"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy35 := &x.LatestControls
					yy35.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[8] {
					yy38 := &x.Latest
					yy38.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("latest"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy40 := &x.Latest
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[9] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						x.Metrics.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						x.Metrics.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[10] {
					yy46 := &x.Parents
					yy46.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("parents"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy48 := &x.Parents
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[11] {
					yy51 := &x.Children
					yy51.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("children"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yy53 := &x.Children
					yy53.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "topology":
			if r.TryDecodeAsNil() {
				x.Topology = ""
			} else {
				yyv6 := &x.Topology
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "counters":
			if r.TryDecodeAsNil() {
				x.Counters = Counters{}
			} else {
				yyv8 := &x.Counters
				yyv8.CodecDecodeSelf(d)
			}
		case "sets":
			if r.TryDecodeAsNil() {
				x.Sets = Sets{}
			} else {
				yyv9 := &x.Sets
				yyv9.CodecDecodeSelf(d)
			}
		case "adjacency":
			if r.TryDecodeAsNil() {
				x.Adjacency = nil
			} else {
				yyv10 := &x.Adjacency
				yyv10.CodecDecodeSelf(d)
			}
		case "edges":
			if r.TryDecodeAsNil() {
				x.Edges = EdgeMetadatas{}
			} else {
				yyv11 := &x.Edges
				yyv11.CodecDecodeSelf(d)
			}
		case "controls":
			if r.TryDecodeAsNil() {
				x.Controls = NodeControls{}
			} else {
				yyv12 := &x.Controls
				yyv12.CodecDecodeSelf(d)
			}
		case "latestControls":
			if r.TryDecodeAsNil() {
				x.LatestControls = NodeControlDataLatestMap{}
			} else {
				yyv13 := &x.LatestControls
				yyv13.CodecDecodeSelf(d)
			}
		case "latest":
			if r.TryDecodeAsNil() {
				x.Latest = StringLatestMap{}
			} else {
				yyv14 := &x.Latest
				yyv14.CodecDecodeSelf(d)
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv15 := &x.Metrics
				yyv15.CodecDecodeSelf(d)
			}
		case "parents":
			if r.TryDecodeAsNil() {
				x.Parents = Sets{}
			} else {
				yyv16 := &x.Parents
				yyv16.CodecDecodeSelf(d)
			}
		case "children":
			if r.TryDecodeAsNil() {
				x.Children = NodeSet{}
			} else {
				yyv17 := &x.Children
				yyv17.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv19 := &x.ID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Topology = ""
	} else {
		yyv21 := &x.Topology
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Counters = Counters{}
	} else {
		yyv23 := &x.Counters
		yyv23.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Sets = Sets{}
	} else {
		yyv24 := &x.Sets
		yyv24.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Adjacency = nil
	} else {
		yyv25 := &x.Adjacency
		yyv25.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Edges = EdgeMetadatas{}
	} else {
		yyv26 := &x.Edges
		yyv26.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Controls = NodeControls{}
	} else {
		yyv27 := &x.Controls
		yyv27.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.LatestControls = NodeControlDataLatestMap{}
	} else {
		yyv28 := &x.LatestControls
		yyv28.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Latest = StringLatestMap{}
	} else {
		yyv29 := &x.Latest
		yyv29.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv30 := &x.Metrics
		yyv30.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Parents = Sets{}
	} else {
		yyv31 := &x.Parents
		yyv31.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Children = NodeSet{}
	} else {
		yyv32 := &x.Children
		yyv32.CodecDecodeSelf(d)
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *byteCounter) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *byteCounter) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *byteCounter) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *byteCounter) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *Report) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [21]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(21)
			} else {
				yynn2 = 21
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy4 := &x.Endpoint
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Endpoint"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy6 := &x.Endpoint
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy9 := &x.Process
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Process"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy11 := &x.Process
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy14 := &x.Container
				yy14.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy16 := &x.Container
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy19 := &x.Pod
				yy19.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Pod"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy21 := &x.Pod
				yy21.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy24 := &x.Service
				yy24.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Service"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy26 := &x.Service
				yy26.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy29 := &x.Deployment
				yy29.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Deployment"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy31 := &x.Deployment
				yy31.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy34 := &x.ReplicaSet
				yy34.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ReplicaSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy36 := &x.ReplicaSet
				yy36.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy39 := &x.DaemonSet
				yy39.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("DaemonSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy41 := &x.DaemonSet
				yy41.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy44 := &x.StatefulSet
				yy44.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("StatefulSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy46 := &x.StatefulSet
				yy46.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy49 := &x.CronJob
				yy49.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("CronJob"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy51 := &x.CronJob
				yy51.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy54 := &x.ContainerImage
				yy54.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ContainerImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy56 := &x.ContainerImage
				yy56.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy59 := &x.Host
				yy59.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Host"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy61 := &x.Host
				yy61.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy64 := &x.ECSTask
				yy64.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ECSTask"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy66 := &x.ECSTask
				yy66.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy69 := &x.ECSService
				yy69.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ECSService"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy71 := &x.ECSService
				yy71.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy74 := &x.SwarmService
				yy74.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("SwarmService"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy76 := &x.SwarmService
				yy76.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy79 := &x.Overlay
				yy79.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Overlay"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy81 := &x.Overlay
				yy81.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy84 := &x.Sampling
				yy84.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Sampling"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy86 := &x.Sampling
				yy86.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym89 := z.EncBinary()
				_ = yym89
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Window) {
				} else {
					r.EncodeInt(int64(x.Window))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Window"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Window) {
				} else {
					r.EncodeInt(int64(x.Window))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym92 := z.EncBinary()
				_ = yym92
				if false {
				} else {
					r.EncodeBool(bool(x.Shortcut))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Shortcut"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym93 := z.EncBinary()
				_ = yym93
				if false {
				} else {
					r.EncodeBool(bool(x.Shortcut))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy95 := &x.Plugins
				yy95.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Plugins"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy97 := &x.Plugins
				yy97.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym100 := z.EncBinary()
				_ = yym100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym101 := z.EncBinary()
				_ = yym101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Report) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Report) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "Endpoint":
			if r.TryDecodeAsNil() {
				x.Endpoint = Topology{}
			} else {
				yyv4 := &x.Endpoint
				yyv4.CodecDecodeSelf(d)
			}
		case "Process":
			if r.TryDecodeAsNil() {
				x.Process = Topology{}
			} else {
				yyv5 := &x.Process
				yyv5.CodecDecodeSelf(d)
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = Topology{}
			} else {
				yyv6 := &x.Container
				yyv6.CodecDecodeSelf(d)
			}
		case "Pod":
			if r.TryDecodeAsNil() {
				x.Pod = Topology{}
			} else {
				yyv7 := &x.Pod
				yyv7.CodecDecodeSelf(d)
			}
		case "Service":
			if r.TryDecodeAsNil() {
				x.Service = Topology{}
			} else {
				yyv8 := &x.Service
				yyv8.CodecDecodeSelf(d)
			}
		case "Deployment":
			if r.TryDecodeAsNil() {
				x.Deployment = Topology{}
			} else {
				yyv9 := &x.Deployment
				yyv9.CodecDecodeSelf(d)
			}
		case "ReplicaSet":
			if r.TryDecodeAsNil() {
				x.ReplicaSet = Topology{}
			} else {
				yyv10 := &x.ReplicaSet
				yyv10.CodecDecodeSelf(d)
			}
		case "DaemonSet":
			if r.TryDecodeAsNil() {
				x.DaemonSet = Topology{}
			} else {
				yyv11 := &x.DaemonSet
				yyv11.CodecDecodeSelf(d)
			}
		case "StatefulSet":
			if r.TryDecodeAsNil() {
				x.StatefulSet = Topology{}
			} else {
				yyv12 := &x.StatefulSet
				yyv12.CodecDecodeSelf(d)
			}
		case "CronJob":
			if r.TryDecodeAsNil() {
				x.CronJob = Topology{}
			} else {
				yyv13 := &x.CronJob
				yyv13.CodecDecodeSelf(d)
			}
		case "ContainerImage":
			if r.TryDecodeAsNil() {
				x.ContainerImage = Topology{}
			} else {
				yyv14 := &x.ContainerImage
				yyv14.CodecDecodeSelf(d)
			}
		case "Host":
			if r.TryDecodeAsNil() {
				x.Host = Topology{}
			} else {
				yyv15 := &x.Host
				yyv15.CodecDecodeSelf(d)
			}
		case "ECSTask":
			if r.TryDecodeAsNil() {
				x.ECSTask = Topology{}
			} else {
				yyv16 := &x.ECSTask
				yyv16.CodecDecodeSelf(d)
			}
		case "ECSService":
			if r.TryDecodeAsNil() {
				x.ECSService = Topology{}
			} else {
				yyv17 := &x.ECSService
				yyv17.CodecDecodeSelf(d)
			}
		case "SwarmService":
			if r.TryDecodeAsNil() {
				x.SwarmService = Topology{}
			} else {
				yyv18 := &x.SwarmService
				yyv18.CodecDecodeSelf(d)
			}
		case "Overlay":
			if r.TryDecodeAsNil() {
				x.Overlay = Topology{}
			} else {
				yyv19 := &x.Overlay
				yyv19.CodecDecodeSelf(d)
			}
		case "Sampling":
			if r.TryDecodeAsNil() {
				x.Sampling = Sampling{}
			} else {
				yyv20 := &x.Sampling
				yyv20.CodecDecodeSelf(d)
			}
		case "Window":
			if r.TryDecodeAsNil() {
				x.Window = 0
			} else {
				yyv21 := &x.Window
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv21) {
				} else {
					*((*int64)(yyv21)) = int64(r.DecodeInt(64))
				}
			}
		case "Shortcut":
			if r.TryDecodeAsNil() {
				x.Shortcut = false
			} else {
				yyv23 := &x.Shortcut
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					*((*bool)(yyv23)) = r.DecodeBool()
				}
			}
		case "Plugins":
			if r.TryDecodeAsNil() {
				x.Plugins = pkg2_xfer.PluginSpecs{}
			} else {
				yyv25 := &x.Plugins
				yyv25.CodecDecodeSelf(d)
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv26 := &x.ID
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Report) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj28 int
	var yyb28 bool
	var yyhl28 bool = l >= 0
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Endpoint = Topology{}
	} else {
		yyv29 := &x.Endpoint
		yyv29.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Process = Topology{}
	} else {
		yyv30 := &x.Process
		yyv30.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Container = Topology{}
	} else {
		yyv31 := &x.Container
		yyv31.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Pod = Topology{}
	} else {
		yyv32 := &x.Pod
		yyv32.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Service = Topology{}
	} else {
		yyv33 := &x.Service
		yyv33.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Deployment = Topology{}
	} else {
		yyv34 := &x.Deployment
		yyv34.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ReplicaSet = Topology{}
	} else {
		yyv35 := &x.ReplicaSet
		yyv35.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.DaemonSet = Topology{}
	} else {
		yyv36 := &x.DaemonSet
		yyv36.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.StatefulSet = Topology{}
	} else {
		yyv37 := &x.StatefulSet
		yyv37.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.CronJob = Topology{}
	} else {
		yyv38 := &x.CronJob
		yyv38.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ContainerImage = Topology{}
	} else {
		yyv39 := &x.ContainerImage
		yyv39.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Host = Topology{}
	} else {
		yyv40 := &x.Host
		yyv40.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ECSTask = Topology{}
	} else {
		yyv41 := &x.ECSTask
		yyv41.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ECSService = Topology{}
	} else {
		yyv42 := &x.ECSService
		yyv42.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.SwarmService = Topology{}
	} else {
		yyv43 := &x.SwarmService
		yyv43.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Overlay = Topology{}
	} else {
		yyv44 := &x.Overlay
		yyv44.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Sampling = Sampling{}
	} else {
		yyv45 := &x.Sampling
		yyv45.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Window = 0
	} else {
		yyv46 := &x.Window
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv46) {
		} else {
			*((*int64)(yyv46)) = int64(r.DecodeInt(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Shortcut = false
	} else {
		yyv48 := &x.Shortcut
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*bool)(yyv48)) = r.DecodeBool()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Plugins = pkg2_xfer.PluginSpecs{}
	} else {
		yyv50 := &x.Plugins
		yyv50.CodecDecodeSelf(d)
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv51 := &x.ID
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	for {
		yyj28++
		if yyhl28 {
			yyb28 = yyj28 > l
		} else {
			yyb28 = r.CheckBreak()
		}
		if yyb28 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj28-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *RenderContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [22]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(22)
			} else {
				yynn2 = 22
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy4 := &x.Endpoint
				yy4.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Endpoint"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy6 := &x.Endpoint
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy9 := &x.Process
				yy9.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Process"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy11 := &x.Process
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy14 := &x.Container
				yy14.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy16 := &x.Container
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy19 := &x.Pod
				yy19.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Pod"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy21 := &x.Pod
				yy21.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy24 := &x.Service
				yy24.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Service"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy26 := &x.Service
				yy26.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy29 := &x.Deployment
				yy29.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Deployment"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy31 := &x.Deployment
				yy31.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy34 := &x.ReplicaSet
				yy34.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ReplicaSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy36 := &x.ReplicaSet
				yy36.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy39 := &x.DaemonSet
				yy39.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("DaemonSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy41 := &x.DaemonSet
				yy41.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy44 := &x.StatefulSet
				yy44.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("StatefulSet"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy46 := &x.StatefulSet
				yy46.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy49 := &x.CronJob
				yy49.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("CronJob"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy51 := &x.CronJob
				yy51.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy54 := &x.ContainerImage
				yy54.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ContainerImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy56 := &x.ContainerImage
				yy56.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy59 := &x.Host
				yy59.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Host"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy61 := &x.Host
				yy61.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy64 := &x.ECSTask
				yy64.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ECSTask"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy66 := &x.ECSTask
				yy66.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy69 := &x.ECSService
				yy69.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ECSService"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy71 := &x.ECSService
				yy71.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy74 := &x.SwarmService
				yy74.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("SwarmService"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy76 := &x.SwarmService
				yy76.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy79 := &x.Overlay
				yy79.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Overlay"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy81 := &x.Overlay
				yy81.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy84 := &x.Sampling
				yy84.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Sampling"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy86 := &x.Sampling
				yy86.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym89 := z.EncBinary()
				_ = yym89
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Window) {
				} else {
					r.EncodeInt(int64(x.Window))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Window"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Window) {
				} else {
					r.EncodeInt(int64(x.Window))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym92 := z.EncBinary()
				_ = yym92
				if false {
				} else {
					r.EncodeBool(bool(x.Shortcut))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Shortcut"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym93 := z.EncBinary()
				_ = yym93
				if false {
				} else {
					r.EncodeBool(bool(x.Shortcut))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy95 := &x.Plugins
				yy95.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Plugins"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy97 := &x.Plugins
				yy97.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym100 := z.EncBinary()
				_ = yym100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym101 := z.EncBinary()
				_ = yym101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.MetricsGraphURL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("MetricsGraphURL"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.MetricsGraphURL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *RenderContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *RenderContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "Endpoint":
			if r.TryDecodeAsNil() {
				x.Endpoint = Topology{}
			} else {
				yyv4 := &x.Endpoint
				yyv4.CodecDecodeSelf(d)
			}
		case "Process":
			if r.TryDecodeAsNil() {
				x.Process = Topology{}
			} else {
				yyv5 := &x.Process
				yyv5.CodecDecodeSelf(d)
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = Topology{}
			} else {
				yyv6 := &x.Container
				yyv6.CodecDecodeSelf(d)
			}
		case "Pod":
			if r.TryDecodeAsNil() {
				x.Pod = Topology{}
			} else {
				yyv7 := &x.Pod
				yyv7.CodecDecodeSelf(d)
			}
		case "Service":
			if r.TryDecodeAsNil() {
				x.Service = Topology{}
			} else {
				yyv8 := &x.Service
				yyv8.CodecDecodeSelf(d)
			}
		case "Deployment":
			if r.TryDecodeAsNil() {
				x.Deployment = Topology{}
			} else {
				yyv9 := &x.Deployment
				yyv9.CodecDecodeSelf(d)
			}
		case "ReplicaSet":
			if r.TryDecodeAsNil() {
				x.ReplicaSet = Topology{}
			} else {
				yyv10 := &x.ReplicaSet
				yyv10.CodecDecodeSelf(d)
			}
		case "DaemonSet":
			if r.TryDecodeAsNil() {
				x.DaemonSet = Topology{}
			} else {
				yyv11 := &x.DaemonSet
				yyv11.CodecDecodeSelf(d)
			}
		case "StatefulSet":
			if r.TryDecodeAsNil() {
				x.StatefulSet = Topology{}
			} else {
				yyv12 := &x.StatefulSet
				yyv12.CodecDecodeSelf(d)
			}
		case "CronJob":
			if r.TryDecodeAsNil() {
				x.CronJob = Topology{}
			} else {
				yyv13 := &x.CronJob
				yyv13.CodecDecodeSelf(d)
			}
		case "ContainerImage":
			if r.TryDecodeAsNil() {
				x.ContainerImage = Topology{}
			} else {
				yyv14 := &x.ContainerImage
				yyv14.CodecDecodeSelf(d)
			}
		case "Host":
			if r.TryDecodeAsNil() {
				x.Host = Topology{}
			} else {
				yyv15 := &x.Host
				yyv15.CodecDecodeSelf(d)
			}
		case "ECSTask":
			if r.TryDecodeAsNil() {
				x.ECSTask = Topology{}
			} else {
				yyv16 := &x.ECSTask
				yyv16.CodecDecodeSelf(d)
			}
		case "ECSService":
			if r.TryDecodeAsNil() {
				x.ECSService = Topology{}
			} else {
				yyv17 := &x.ECSService
				yyv17.CodecDecodeSelf(d)
			}
		case "SwarmService":
			if r.TryDecodeAsNil() {
				x.SwarmService = Topology{}
			} else {
				yyv18 := &x.SwarmService
				yyv18.CodecDecodeSelf(d)
			}
		case "Overlay":
			if r.TryDecodeAsNil() {
				x.Overlay = Topology{}
			} else {
				yyv19 := &x.Overlay
				yyv19.CodecDecodeSelf(d)
			}
		case "Sampling":
			if r.TryDecodeAsNil() {
				x.Sampling = Sampling{}
			} else {
				yyv20 := &x.Sampling
				yyv20.CodecDecodeSelf(d)
			}
		case "Window":
			if r.TryDecodeAsNil() {
				x.Window = 0
			} else {
				yyv21 := &x.Window
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv21) {
				} else {
					*((*int64)(yyv21)) = int64(r.DecodeInt(64))
				}
			}
		case "Shortcut":
			if r.TryDecodeAsNil() {
				x.Shortcut = false
			} else {
				yyv23 := &x.Shortcut
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					*((*bool)(yyv23)) = r.DecodeBool()
				}
			}
		case "Plugins":
			if r.TryDecodeAsNil() {
				x.Plugins = pkg2_xfer.PluginSpecs{}
			} else {
				yyv25 := &x.Plugins
				yyv25.CodecDecodeSelf(d)
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv26 := &x.ID
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "MetricsGraphURL":
			if r.TryDecodeAsNil() {
				x.MetricsGraphURL = ""
			} else {
				yyv28 := &x.MetricsGraphURL
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *RenderContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Endpoint = Topology{}
	} else {
		yyv31 := &x.Endpoint
		yyv31.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Process = Topology{}
	} else {
		yyv32 := &x.Process
		yyv32.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Container = Topology{}
	} else {
		yyv33 := &x.Container
		yyv33.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Pod = Topology{}
	} else {
		yyv34 := &x.Pod
		yyv34.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Service = Topology{}
	} else {
		yyv35 := &x.Service
		yyv35.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Deployment = Topology{}
	} else {
		yyv36 := &x.Deployment
		yyv36.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ReplicaSet = Topology{}
	} else {
		yyv37 := &x.ReplicaSet
		yyv37.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.DaemonSet = Topology{}
	} else {
		yyv38 := &x.DaemonSet
		yyv38.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.StatefulSet = Topology{}
	} else {
		yyv39 := &x.StatefulSet
		yyv39.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.CronJob = Topology{}
	} else {
		yyv40 := &x.CronJob
		yyv40.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ContainerImage = Topology{}
	} else {
		yyv41 := &x.ContainerImage
		yyv41.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Host = Topology{}
	} else {
		yyv42 := &x.Host
		yyv42.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ECSTask = Topology{}
	} else {
		yyv43 := &x.ECSTask
		yyv43.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ECSService = Topology{}
	} else {
		yyv44 := &x.ECSService
		yyv44.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.SwarmService = Topology{}
	} else {
		yyv45 := &x.SwarmService
		yyv45.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Overlay = Topology{}
	} else {
		yyv46 := &x.Overlay
		yyv46.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Sampling = Sampling{}
	} else {
		yyv47 := &x.Sampling
		yyv47.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Window = 0
	} else {
		yyv48 := &x.Window
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv48) {
		} else {
			*((*int64)(yyv48)) = int64(r.DecodeInt(64))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Shortcut = false
	} else {
		yyv50 := &x.Shortcut
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*bool)(yyv50)) = r.DecodeBool()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Plugins = pkg2_xfer.PluginSpecs{}
	} else {
		yyv52 := &x.Plugins
		yyv52.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv53 := &x.ID
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*string)(yyv53)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.MetricsGraphURL = ""
	} else {
		yyv55 := &x.MetricsGraphURL
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*string)(yyv55)) = r.DecodeString()
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *Sampling) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Count))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Count"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Total))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("Total"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Total))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Sampling) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Sampling) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "Count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				yyv4 := &x.Count
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "Total":
			if r.TryDecodeAsNil() {
				x.Total = 0
			} else {
				yyv6 := &x.Total
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Sampling) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		yyv9 := &x.Count
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Total = 0
	} else {
		yyv11 := &x.Total
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x Metrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encMetrics((Metrics)(x), e)
		}
	}
}

func (x *Metrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decMetrics((*Metrics)(x), d)
	}
}

func (x *Sample) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy4 := &x.Timestamp
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.EncodeBuiltin(yym6, yy4)
				} else if z.HasExtensions() && z.EncExt(yy4) {
				} else if yym5 {
					z.EncBinaryMarshal(yy4)
				} else if !yym5 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy4)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("date"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy7 := &x.Timestamp
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym12 := z.EncBinary()
				_ = yym12
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Sample) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Sample) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "date":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				yyv4 := &x.Timestamp
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.DecodeBuiltin(yym6, yyv4)
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else if yym5 {
					z.DecBinaryUnmarshal(yyv4)
				} else if !yym5 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4)
				} else {
					z.DecFallback(yyv4, false)
				}
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				yyv7 := &x.Value
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*float64)(yyv7)) = float64(r.DecodeFloat(false))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Sample) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		yyv10 := &x.Timestamp
		yym11 := z.DecBinary()
		_ = yym11
		if false {
		} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
			r.DecodeBuiltin(yym12, yyv10)
		} else if z.HasExtensions() && z.DecExt(yyv10) {
		} else if yym11 {
			z.DecBinaryUnmarshal(yyv10)
		} else if !yym11 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv10)
		} else {
			z.DecFallback(yyv10, false)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		yyv13 := &x.Value
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*float64)(yyv13)) = float64(r.DecodeFloat(false))
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *WireMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = len(x.Samples) != 0
			yyq2[3] = x.First != ""
			yyq2[4] = x.Last != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[0] {
					if x.Samples == nil {
						r.EncodeNil()
					} else {
						yym4 := z.EncBinary()
						_ = yym4
						if false {
						} else {
							h.encSliceSample(([]Sample)(x.Samples), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("samples"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.Samples == nil {
						r.EncodeNil()
					} else {
						yym5 := z.EncBinary()
						_ = yym5
						if false {
						} else {
							h.encSliceSample(([]Sample)(x.Samples), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.First))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("first"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.First))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Last))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("last"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Last))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *WireMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *WireMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "samples":
			if r.TryDecodeAsNil() {
				x.Samples = nil
			} else {
				yyv4 := &x.Samples
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSliceSample((*[]Sample)(yyv4), d)
				}
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				yyv6 := &x.Min
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*float64)(yyv6)) = float64(r.DecodeFloat(false))
				}
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				yyv8 := &x.Max
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*float64)(yyv8)) = float64(r.DecodeFloat(false))
				}
			}
		case "first":
			if r.TryDecodeAsNil() {
				x.First = ""
			} else {
				yyv10 := &x.First
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "last":
			if r.TryDecodeAsNil() {
				x.Last = ""
			} else {
				yyv12 := &x.Last
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *WireMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Samples = nil
	} else {
		yyv15 := &x.Samples
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSliceSample((*[]Sample)(yyv15), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		yyv17 := &x.Min
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*float64)(yyv17)) = float64(r.DecodeFloat(false))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		yyv19 := &x.Max
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*float64)(yyv19)) = float64(r.DecodeFloat(false))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.First = ""
	} else {
		yyv21 := &x.First
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Last = ""
	} else {
		yyv23 := &x.Last
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x StringSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encStringSet((StringSet)(x), e)
		}
	}
}

func (x *StringSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decStringSet((*StringSet)(x), d)
	}
}

func (x Controls) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encControls((Controls)(x), e)
		}
	}
}

func (x *Controls) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decControls((*Controls)(x), d)
	}
}

func (x *Control) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Human))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("human"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Human))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Icon))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("icon"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Icon))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Control) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Control) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "human":
			if r.TryDecodeAsNil() {
				x.Human = ""
			} else {
				yyv6 := &x.Human
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "icon":
			if r.TryDecodeAsNil() {
				x.Icon = ""
			} else {
				yyv8 := &x.Icon
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = 0
			} else {
				yyv10 := &x.Rank
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize4018))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Control) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv13 := &x.ID
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Human = ""
	} else {
		yyv15 := &x.Human
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Icon = ""
	} else {
		yyv17 := &x.Icon
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Rank = 0
	} else {
		yyv19 := &x.Rank
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize4018))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *wireNodeControls) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Timestamp != ""
			yyq2[1] = len(x.Controls) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Timestamp))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("timestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Timestamp))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[1] {
					if x.Controls == nil {
						r.EncodeNil()
					} else {
						x.Controls.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("controls"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.Controls == nil {
						r.EncodeNil()
					} else {
						x.Controls.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *wireNodeControls) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *wireNodeControls) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = ""
			} else {
				yyv4 := &x.Timestamp
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "controls":
			if r.TryDecodeAsNil() {
				x.Controls = nil
			} else {
				yyv6 := &x.Controls
				yyv6.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *wireNodeControls) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Timestamp = ""
	} else {
		yyv8 := &x.Timestamp
		yym9 := z.DecBinary()
		_ = yym9
		if false {
		} else {
			*((*string)(yyv8)) = r.DecodeString()
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Controls = nil
	} else {
		yyv10 := &x.Controls
		yyv10.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *NodeControlData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Dead))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("dead"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Dead))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *NodeControlData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *NodeControlData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "dead":
			if r.TryDecodeAsNil() {
				x.Dead = false
			} else {
				yyv4 := &x.Dead
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *NodeControlData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Dead = false
	} else {
		yyv7 := &x.Dead
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*bool)(yyv7)) = r.DecodeBool()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *MetadataTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[1] = x.Label != ""
			yyq2[2] = x.Truncate != 0
			yyq2[3] = x.Datatype != ""
			yyq2[4] = x.Priority != 0
			yyq2[5] = x.From != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Label))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("label"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Label))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeInt(int64(x.Truncate))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("truncate"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeInt(int64(x.Truncate))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Datatype))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("dataType"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Datatype))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				} else {
					r.EncodeFloat64(0)
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("priority"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.From))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.From))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *MetadataTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *MetadataTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "truncate":
			if r.TryDecodeAsNil() {
				x.Truncate = 0
			} else {
				yyv8 := &x.Truncate
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize4018))
				}
			}
		case "dataType":
			if r.TryDecodeAsNil() {
				x.Datatype = ""
			} else {
				yyv10 := &x.Datatype
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv12 := &x.Priority
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*float64)(yyv12)) = float64(r.DecodeFloat(false))
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = ""
			} else {
				yyv14 := &x.From
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *MetadataTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv17 := &x.ID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Truncate = 0
	} else {
		yyv21 := &x.Truncate
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize4018))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Datatype = ""
	} else {
		yyv23 := &x.Datatype
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv25 := &x.Priority
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*float64)(yyv25)) = float64(r.DecodeFloat(false))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.From = ""
	} else {
		yyv27 := &x.From
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *MetadataRow) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.Priority != 0
			yyq2[4] = x.Datatype != ""
			yyq2[5] = x.Truncate != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				} else {
					r.EncodeFloat64(0)
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("priority"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Datatype))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("dataType"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Datatype))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeInt(int64(x.Truncate))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("truncate"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeInt(int64(x.Truncate))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *MetadataRow) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *MetadataRow) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				yyv8 := &x.Value
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv10 := &x.Priority
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*float64)(yyv10)) = float64(r.DecodeFloat(false))
				}
			}
		case "dataType":
			if r.TryDecodeAsNil() {
				x.Datatype = ""
			} else {
				yyv12 := &x.Datatype
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "truncate":
			if r.TryDecodeAsNil() {
				x.Truncate = 0
			} else {
				yyv14 := &x.Truncate
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize4018))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *MetadataRow) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv17 := &x.ID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		yyv21 := &x.Value
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv23 := &x.Priority
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*float64)(yyv23)) = float64(r.DecodeFloat(false))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Datatype = ""
	} else {
		yyv25 := &x.Datatype
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Truncate = 0
	} else {
		yyv27 := &x.Truncate
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize4018))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x MetadataTemplates) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encMetadataTemplates((MetadataTemplates)(x), e)
		}
	}
}

func (x *MetadataTemplates) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decMetadataTemplates((*MetadataTemplates)(x), d)
	}
}

func (x MetadataRowsByPriority) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encMetadataRowsByPriority((MetadataRowsByPriority)(x), e)
		}
	}
}

func (x *MetadataRowsByPriority) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decMetadataRowsByPriority((*MetadataRowsByPriority)(x), d)
	}
}

func (x *Networks) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Networks) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Networks) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Networks) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *Column) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.DataType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("dataType"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.DataType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Column) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Column) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "dataType":
			if r.TryDecodeAsNil() {
				x.DataType = ""
			} else {
				yyv8 := &x.DataType
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Column) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv11 := &x.ID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv13 := &x.Label
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.DataType = ""
	} else {
		yyv15 := &x.DataType
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *Row) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Entries == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringStringV(x.Entries, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("entries"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Entries == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringStringV(x.Entries, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Row) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Row) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "entries":
			if r.TryDecodeAsNil() {
				x.Entries = nil
			} else {
				yyv6 := &x.Entries
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringStringX(yyv6, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Row) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv9 := &x.ID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Entries = nil
	} else {
		yyv11 := &x.Entries
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			z.F.DecMapStringStringX(yyv11, false, d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x rowsByID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encrowsByID((rowsByID)(x), e)
		}
	}
}

func (x *rowsByID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decrowsByID((*rowsByID)(x), d)
	}
}

func (x *Table) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[5] = x.TruncationCount != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("columns"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Rows == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceRow(([]Row)(x.Rows), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("rows"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Rows == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSliceRow(([]Row)(x.Rows), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeInt(int64(x.TruncationCount))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("truncationCount"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeInt(int64(x.TruncationCount))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Table) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Table) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv8 := &x.Type
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "columns":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				yyv10 := &x.Columns
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSliceColumn((*[]Column)(yyv10), d)
				}
			}
		case "rows":
			if r.TryDecodeAsNil() {
				x.Rows = nil
			} else {
				yyv12 := &x.Rows
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSliceRow((*[]Row)(yyv12), d)
				}
			}
		case "truncationCount":
			if r.TryDecodeAsNil() {
				x.TruncationCount = 0
			} else {
				yyv14 := &x.TruncationCount
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize4018))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Table) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv17 := &x.ID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv21 := &x.Type
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		yyv23 := &x.Columns
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSliceColumn((*[]Column)(yyv23), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Rows = nil
	} else {
		yyv25 := &x.Rows
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			h.decSliceRow((*[]Row)(yyv25), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.TruncationCount = 0
	} else {
		yyv27 := &x.TruncationCount
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize4018))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x tablesByID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.enctablesByID((tablesByID)(x), e)
		}
	}
}

func (x *tablesByID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.dectablesByID((*tablesByID)(x), d)
	}
}

func (x *TableTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("columns"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.FixedRows == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						z.F.EncMapStringStringV(x.FixedRows, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("fixedRows"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.FixedRows == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						z.F.EncMapStringStringV(x.FixedRows, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *TableTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *TableTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv8 := &x.Prefix
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv10 := &x.Type
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "columns":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				yyv12 := &x.Columns
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSliceColumn((*[]Column)(yyv12), d)
				}
			}
		case "fixedRows":
			if r.TryDecodeAsNil() {
				x.FixedRows = nil
			} else {
				yyv14 := &x.FixedRows
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					z.F.DecMapStringStringX(yyv14, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *TableTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv17 := &x.ID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv21 := &x.Prefix
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv23 := &x.Type
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		yyv25 := &x.Columns
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			h.decSliceColumn((*[]Column)(yyv25), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.FixedRows = nil
	} else {
		yyv27 := &x.FixedRows
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			z.F.DecMapStringStringX(yyv27, false, d)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x TableTemplates) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encTableTemplates((TableTemplates)(x), e)
		}
	}
}

func (x *TableTemplates) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decTableTemplates((*TableTemplates)(x), d)
	}
}

func (x *Topology) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Shape != ""
			yyq2[1] = x.Label != ""
			yyq2[2] = x.LabelPlural != ""
			yyq2[4] = len(x.Controls) != 0
			yyq2[5] = len(x.MetadataTemplates) != 0
			yyq2[6] = len(x.MetricTemplates) != 0
			yyq2[7] = len(x.TableTemplates) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Shape))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("shape"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Shape))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Label))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("label"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Label))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.LabelPlural))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("label_plural"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.LabelPlural))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					x.Nodes.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("nodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					x.Nodes.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[4] {
					if x.Controls == nil {
						r.EncodeNil()
					} else {
						x.Controls.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("controls"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.Controls == nil {
						r.EncodeNil()
					} else {
						x.Controls.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[5] {
					if x.MetadataTemplates == nil {
						r.EncodeNil()
					} else {
						x.MetadataTemplates.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("metadata_templates"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.MetadataTemplates == nil {
						r.EncodeNil()
					} else {
						x.MetadataTemplates.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[6] {
					if x.MetricTemplates == nil {
						r.EncodeNil()
					} else {
						x.MetricTemplates.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("metric_templates"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.MetricTemplates == nil {
						r.EncodeNil()
					} else {
						x.MetricTemplates.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[7] {
					if x.TableTemplates == nil {
						r.EncodeNil()
					} else {
						x.TableTemplates.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("table_templates"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.TableTemplates == nil {
						r.EncodeNil()
					} else {
						x.TableTemplates.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *Topology) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *Topology) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "shape":
			if r.TryDecodeAsNil() {
				x.Shape = ""
			} else {
				yyv4 := &x.Shape
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "label_plural":
			if r.TryDecodeAsNil() {
				x.LabelPlural = ""
			} else {
				yyv8 := &x.LabelPlural
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "nodes":
			if r.TryDecodeAsNil() {
				x.Nodes = nil
			} else {
				yyv10 := &x.Nodes
				yyv10.CodecDecodeSelf(d)
			}
		case "controls":
			if r.TryDecodeAsNil() {
				x.Controls = nil
			} else {
				yyv11 := &x.Controls
				yyv11.CodecDecodeSelf(d)
			}
		case "metadata_templates":
			if r.TryDecodeAsNil() {
				x.MetadataTemplates = nil
			} else {
				yyv12 := &x.MetadataTemplates
				yyv12.CodecDecodeSelf(d)
			}
		case "metric_templates":
			if r.TryDecodeAsNil() {
				x.MetricTemplates = nil
			} else {
				yyv13 := &x.MetricTemplates
				yyv13.CodecDecodeSelf(d)
			}
		case "table_templates":
			if r.TryDecodeAsNil() {
				x.TableTemplates = nil
			} else {
				yyv14 := &x.TableTemplates
				yyv14.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *Topology) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Shape = ""
	} else {
		yyv16 := &x.Shape
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv18 := &x.Label
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*string)(yyv18)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.LabelPlural = ""
	} else {
		yyv20 := &x.LabelPlural
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			*((*string)(yyv20)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Nodes = nil
	} else {
		yyv22 := &x.Nodes
		yyv22.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Controls = nil
	} else {
		yyv23 := &x.Controls
		yyv23.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.MetadataTemplates = nil
	} else {
		yyv24 := &x.MetadataTemplates
		yyv24.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.MetricTemplates = nil
	} else {
		yyv25 := &x.MetricTemplates
		yyv25.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.TableTemplates = nil
	} else {
		yyv26 := &x.TableTemplates
		yyv26.CodecDecodeSelf(d)
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x Nodes) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encNodes((Nodes)(x), e)
		}
	}
}

func (x *Nodes) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decNodes((*Nodes)(x), d)
	}
}

func (x *stringLatestEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy4 := &x.Timestamp
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.EncodeBuiltin(yym6, yy4)
				} else if z.HasExtensions() && z.EncExt(yy4) {
				} else if yym5 {
					z.EncBinaryMarshal(yy4)
				} else if !yym5 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy4)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy7 := &x.Timestamp
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym12 := z.EncBinary()
				_ = yym12
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *stringLatestEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *stringLatestEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				yyv4 := &x.Timestamp
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.DecodeBuiltin(yym6, yyv4)
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else if yym5 {
					z.DecBinaryUnmarshal(yyv4)
				} else if !yym5 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4)
				} else {
					z.DecFallback(yyv4, false)
				}
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				yyv7 := &x.Value
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *stringLatestEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		yyv10 := &x.Timestamp
		yym11 := z.DecBinary()
		_ = yym11
		if false {
		} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
			r.DecodeBuiltin(yym12, yyv10)
		} else if z.HasExtensions() && z.DecExt(yyv10) {
		} else if yym11 {
			z.DecBinaryUnmarshal(yyv10)
		} else if !yym11 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv10)
		} else {
			z.DecFallback(yyv10, false)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		yyv13 := &x.Value
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *nodeControlDataLatestEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy4 := &x.Timestamp
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.EncodeBuiltin(yym6, yy4)
				} else if z.HasExtensions() && z.EncExt(yy4) {
				} else if yym5 {
					z.EncBinaryMarshal(yy4)
				} else if !yym5 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy4)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy7 := &x.Timestamp
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yy11 := &x.Value
				yy11.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yy13 := &x.Value
				yy13.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *nodeControlDataLatestEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *nodeControlDataLatestEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = time.Time{}
			} else {
				yyv4 := &x.Timestamp
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.DecodeBuiltin(yym6, yyv4)
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else if yym5 {
					z.DecBinaryUnmarshal(yyv4)
				} else if !yym5 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4)
				} else {
					z.DecFallback(yyv4, false)
				}
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = NodeControlData{}
			} else {
				yyv7 := &x.Value
				yyv7.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *nodeControlDataLatestEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Timestamp = time.Time{}
	} else {
		yyv9 := &x.Timestamp
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else if yym11 := z.TimeRtidIfBinc(); yym11 != 0 {
			r.DecodeBuiltin(yym11, yyv9)
		} else if z.HasExtensions() && z.DecExt(yyv9) {
		} else if yym10 {
			z.DecBinaryUnmarshal(yyv9)
		} else if !yym10 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv9)
		} else {
			z.DecFallback(yyv9, false)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Value = NodeControlData{}
	} else {
		yyv12 := &x.Value
		yyv12.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *MetricTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[1] = x.Label != ""
			yyq2[2] = x.Format != ""
			yyq2[3] = x.Group != ""
			yyq2[4] = x.Priority != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Label))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("label"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Label))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Format))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("format"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Format))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Group))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				} else {
					r.EncodeFloat64(0)
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("priority"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *MetricTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *MetricTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "format":
			if r.TryDecodeAsNil() {
				x.Format = ""
			} else {
				yyv8 := &x.Format
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				yyv10 := &x.Group
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv12 := &x.Priority
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*float64)(yyv12)) = float64(r.DecodeFloat(false))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *MetricTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv17 := &x.Label
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Format = ""
	} else {
		yyv19 := &x.Format
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		yyv21 := &x.Group
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv23 := &x.Priority
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*float64)(yyv23)) = float64(r.DecodeFloat(false))
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x MetricTemplates) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encMetricTemplates((MetricTemplates)(x), e)
		}
	}
}

func (x *MetricTemplates) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decMetricTemplates((*MetricTemplates)(x), d)
	}
}

func (x IDList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encIDList((IDList)(x), e)
		}
	}
}

func (x *IDList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decIDList((*IDList)(x), d)
	}
}

func (x *EdgeMetadata) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.EgressPacketCount != nil
			yyq2[1] = x.IngressPacketCount != nil
			yyq2[2] = x.EgressByteCount != nil
			yyq2[3] = x.IngressByteCount != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[0] {
					if x.EgressPacketCount == nil {
						r.EncodeNil()
					} else {
						yy4 := *x.EgressPacketCount
						yym5 := z.EncBinary()
						_ = yym5
						if false {
						} else {
							r.EncodeUint(uint64(yy4))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("egress_packet_count"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.EgressPacketCount == nil {
						r.EncodeNil()
					} else {
						yy6 := *x.EgressPacketCount
						yym7 := z.EncBinary()
						_ = yym7
						if false {
						} else {
							r.EncodeUint(uint64(yy6))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[1] {
					if x.IngressPacketCount == nil {
						r.EncodeNil()
					} else {
						yy9 := *x.IngressPacketCount
						yym10 := z.EncBinary()
						_ = yym10
						if false {
						} else {
							r.EncodeUint(uint64(yy9))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("ingress_packet_count"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.IngressPacketCount == nil {
						r.EncodeNil()
					} else {
						yy11 := *x.IngressPacketCount
						yym12 := z.EncBinary()
						_ = yym12
						if false {
						} else {
							r.EncodeUint(uint64(yy11))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[2] {
					if x.EgressByteCount == nil {
						r.EncodeNil()
					} else {
						yy14 := *x.EgressByteCount
						yym15 := z.EncBinary()
						_ = yym15
						if false {
						} else {
							r.EncodeUint(uint64(yy14))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("egress_byte_count"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.EgressByteCount == nil {
						r.EncodeNil()
					} else {
						yy16 := *x.EgressByteCount
						yym17 := z.EncBinary()
						_ = yym17
						if false {
						} else {
							r.EncodeUint(uint64(yy16))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					if x.IngressByteCount == nil {
						r.EncodeNil()
					} else {
						yy19 := *x.IngressByteCount
						yym20 := z.EncBinary()
						_ = yym20
						if false {
						} else {
							r.EncodeUint(uint64(yy19))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("ingress_byte_count"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					if x.IngressByteCount == nil {
						r.EncodeNil()
					} else {
						yy21 := *x.IngressByteCount
						yym22 := z.EncBinary()
						_ = yym22
						if false {
						} else {
							r.EncodeUint(uint64(yy21))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *EdgeMetadata) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *EdgeMetadata) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "egress_packet_count":
			if r.TryDecodeAsNil() {
				if x.EgressPacketCount != nil {
					x.EgressPacketCount = nil
				}
			} else {
				if x.EgressPacketCount == nil {
					x.EgressPacketCount = new(uint64)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(x.EgressPacketCount)) = uint64(r.DecodeUint(64))
				}
			}
		case "ingress_packet_count":
			if r.TryDecodeAsNil() {
				if x.IngressPacketCount != nil {
					x.IngressPacketCount = nil
				}
			} else {
				if x.IngressPacketCount == nil {
					x.IngressPacketCount = new(uint64)
				}
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(x.IngressPacketCount)) = uint64(r.DecodeUint(64))
				}
			}
		case "egress_byte_count":
			if r.TryDecodeAsNil() {
				if x.EgressByteCount != nil {
					x.EgressByteCount = nil
				}
			} else {
				if x.EgressByteCount == nil {
					x.EgressByteCount = new(uint64)
				}
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(x.EgressByteCount)) = uint64(r.DecodeUint(64))
				}
			}
		case "ingress_byte_count":
			if r.TryDecodeAsNil() {
				if x.IngressByteCount != nil {
					x.IngressByteCount = nil
				}
			} else {
				if x.IngressByteCount == nil {
					x.IngressByteCount = new(uint64)
				}
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(x.IngressByteCount)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *EdgeMetadata) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		if x.EgressPacketCount != nil {
			x.EgressPacketCount = nil
		}
	} else {
		if x.EgressPacketCount == nil {
			x.EgressPacketCount = new(uint64)
		}
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(x.EgressPacketCount)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		if x.IngressPacketCount != nil {
			x.IngressPacketCount = nil
		}
	} else {
		if x.IngressPacketCount == nil {
			x.IngressPacketCount = new(uint64)
		}
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(x.IngressPacketCount)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		if x.EgressByteCount != nil {
			x.EgressByteCount = nil
		}
	} else {
		if x.EgressByteCount == nil {
			x.EgressByteCount = new(uint64)
		}
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(x.EgressByteCount)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		if x.IngressByteCount != nil {
			x.IngressByteCount = nil
		}
	} else {
		if x.IngressByteCount == nil {
			x.IngressByteCount = new(uint64)
		}
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(x.IngressByteCount)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x *wiredMetricRow) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[2] = x.Format != ""
			yyq2[3] = x.Group != ""
			yyq2[5] = x.ValueEmpty != false
			yyq2[6] = x.Priority != 0
			yyq2[10] = x.First != ""
			yyq2[11] = x.Last != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Format))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("format"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Format))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Group))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeBool(bool(x.ValueEmpty))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("valueEmpty"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeBool(bool(x.ValueEmpty))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				} else {
					r.EncodeFloat64(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("priority"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeFloat64(float64(x.Priority))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if x.Samples == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						h.encSliceSample(([]Sample)(x.Samples), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("samples"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				if x.Samples == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						h.encSliceSample(([]Sample)(x.Samples), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[10] {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.First))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("first"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.First))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				if yyq2[11] {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Last))
					}
				} else {
					r.EncodeString(codecSelferC_UTF84018, "")
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey4018)
					r.EncodeString(codecSelferC_UTF84018, string("last"))
					z.EncSendContainerState(codecSelfer_containerMapValue4018)
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF84018, string(x.Last))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4018)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.URL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4018)
				r.EncodeString(codecSelferC_UTF84018, string("url"))
				z.EncSendContainerState(codecSelfer_containerMapValue4018)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF84018, string(x.URL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4018)
			}
		}
	}
}

func (x *wiredMetricRow) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4018 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4018)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4018 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4018)
		}
	}
}

func (x *wiredMetricRow) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4018)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString4018{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue4018)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "format":
			if r.TryDecodeAsNil() {
				x.Format = ""
			} else {
				yyv8 := &x.Format
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				yyv10 := &x.Group
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				yyv12 := &x.Value
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*float64)(yyv12)) = float64(r.DecodeFloat(false))
				}
			}
		case "valueEmpty":
			if r.TryDecodeAsNil() {
				x.ValueEmpty = false
			} else {
				yyv14 := &x.ValueEmpty
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv16 := &x.Priority
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*float64)(yyv16)) = float64(r.DecodeFloat(false))
				}
			}
		case "samples":
			if r.TryDecodeAsNil() {
				x.Samples = nil
			} else {
				yyv18 := &x.Samples
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					h.decSliceSample((*[]Sample)(yyv18), d)
				}
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				yyv20 := &x.Min
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*float64)(yyv20)) = float64(r.DecodeFloat(false))
				}
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				yyv22 := &x.Max
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*float64)(yyv22)) = float64(r.DecodeFloat(false))
				}
			}
		case "first":
			if r.TryDecodeAsNil() {
				x.First = ""
			} else {
				yyv24 := &x.First
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "last":
			if r.TryDecodeAsNil() {
				x.Last = ""
			} else {
				yyv26 := &x.Last
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				yyv28 := &x.URL
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x *wiredMetricRow) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv31 := &x.ID
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv33 := &x.Label
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Format = ""
	} else {
		yyv35 := &x.Format
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		yyv37 := &x.Group
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		yyv39 := &x.Value
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*float64)(yyv39)) = float64(r.DecodeFloat(false))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.ValueEmpty = false
	} else {
		yyv41 := &x.ValueEmpty
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*bool)(yyv41)) = r.DecodeBool()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv43 := &x.Priority
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*float64)(yyv43)) = float64(r.DecodeFloat(false))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Samples = nil
	} else {
		yyv45 := &x.Samples
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			h.decSliceSample((*[]Sample)(yyv45), d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		yyv47 := &x.Min
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*float64)(yyv47)) = float64(r.DecodeFloat(false))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		yyv49 := &x.Max
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*float64)(yyv49)) = float64(r.DecodeFloat(false))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.First = ""
	} else {
		yyv51 := &x.First
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.Last = ""
	} else {
		yyv53 := &x.Last
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*string)(yyv53)) = r.DecodeString()
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4018)
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		yyv55 := &x.URL
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*string)(yyv55)) = r.DecodeString()
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4018)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x MetricRowsByPriority) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encMetricRowsByPriority((MetricRowsByPriority)(x), e)
		}
	}
}

func (x *MetricRowsByPriority) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decMetricRowsByPriority((*MetricRowsByPriority)(x), d)
	}
}

func (x codecSelfer4018) encMetrics(v Metrics, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue4018)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) decMetrics(v *Metrics, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 104)
		yyv1 = make(map[string]Metric, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 Metric
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = Metric{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = Metric{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = Metric{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = Metric{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) encSliceSample(v []Sample, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decSliceSample(v *[]Sample, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Sample{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Sample, yyrl1)
				}
			} else {
				yyv1 = make([]Sample, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Sample{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Sample{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Sample{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Sample{}) // var yyz1 Sample
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Sample{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Sample{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encStringSet(v StringSet, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyv1))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decStringSet(v *StringSet, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
			} else {
				yyv1 = make([]string, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = ""
			} else {
				yyv2 := &yyv1[yyj1]
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, "")
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv4 := &yyv1[yyj1]
					yym5 := z.DecBinary()
					_ = yym5
					if false {
					} else {
						*((*string)(yyv4)) = r.DecodeString()
					}
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "") // var yyz1 string
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv6 := &yyv1[yyj1]
					yym7 := z.DecBinary()
					_ = yym7
					if false {
					} else {
						*((*string)(yyv6)) = r.DecodeString()
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encControls(v Controls, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue4018)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) decControls(v *Controls, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 72)
		yyv1 = make(map[string]Control, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 Control
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = Control{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = Control{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = Control{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = Control{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) encMetadataTemplates(v MetadataTemplates, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue4018)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) decMetadataTemplates(v *MetadataTemplates, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 96)
		yyv1 = make(map[string]MetadataTemplate, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 MetadataTemplate
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = MetadataTemplate{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = MetadataTemplate{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = MetadataTemplate{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = MetadataTemplate{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) encMetadataRowsByPriority(v MetadataRowsByPriority, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decMetadataRowsByPriority(v *MetadataRowsByPriority, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []MetadataRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]MetadataRow, yyrl1)
				}
			} else {
				yyv1 = make([]MetadataRow, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = MetadataRow{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, MetadataRow{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = MetadataRow{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, MetadataRow{}) // var yyz1 MetadataRow
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = MetadataRow{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []MetadataRow{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encrowsByID(v rowsByID, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decrowsByID(v *rowsByID, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Row{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Row, yyrl1)
				}
			} else {
				yyv1 = make([]Row, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Row{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Row{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Row{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Row{}) // var yyz1 Row
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Row{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Row{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encSliceColumn(v []Column, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decSliceColumn(v *[]Column, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Column{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Column, yyrl1)
				}
			} else {
				yyv1 = make([]Column, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Column{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Column{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Column{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Column{}) // var yyz1 Column
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Column{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Column{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encSliceRow(v []Row, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decSliceRow(v *[]Row, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Row{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Row, yyrl1)
				}
			} else {
				yyv1 = make([]Row, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Row{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Row{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Row{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Row{}) // var yyz1 Row
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Row{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Row{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) enctablesByID(v tablesByID, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) dectablesByID(v *tablesByID, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Table{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 104)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Table, yyrl1)
				}
			} else {
				yyv1 = make([]Table, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Table{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Table{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Table{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Table{}) // var yyz1 Table
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Table{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Table{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encTableTemplates(v TableTemplates, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue4018)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) decTableTemplates(v *TableTemplates, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 112)
		yyv1 = make(map[string]TableTemplate, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 TableTemplate
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TableTemplate{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = TableTemplate{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TableTemplate{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = TableTemplate{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) encNodes(v Nodes, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue4018)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) decNodes(v *Nodes, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 240)
		yyv1 = make(map[string]Node, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 Node
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = Node{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = Node{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = Node{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = Node{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) encMetricTemplates(v MetricTemplates, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue4018)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) decMetricTemplates(v *MetricTemplates, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 88)
		yyv1 = make(map[string]MetricTemplate, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 MetricTemplate
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = MetricTemplate{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = MetricTemplate{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey4018)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = MetricTemplate{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue4018)
			if r.TryDecodeAsNil() {
				yymv1 = MetricTemplate{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd4018)
}

func (x codecSelfer4018) encIDList(v IDList, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF84018, string(yyv1))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decIDList(v *IDList, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
			} else {
				yyv1 = make([]string, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = ""
			} else {
				yyv2 := &yyv1[yyj1]
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, "")
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv4 := &yyv1[yyj1]
					yym5 := z.DecBinary()
					_ = yym5
					if false {
					} else {
						*((*string)(yyv4)) = r.DecodeString()
					}
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "") // var yyz1 string
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv6 := &yyv1[yyj1]
					yym7 := z.DecBinary()
					_ = yym7
					if false {
					} else {
						*((*string)(yyv6)) = r.DecodeString()
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer4018) encMetricRowsByPriority(v MetricRowsByPriority, e *codec1978.Encoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4018)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4018)
}

func (x codecSelfer4018) decMetricRowsByPriority(v *MetricRowsByPriority, d *codec1978.Decoder) {
	var h codecSelfer4018
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []MetricRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]MetricRow, yyrl1)
				}
			} else {
				yyv1 = make([]MetricRow, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = MetricRow{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, MetricRow{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = MetricRow{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, MetricRow{}) // var yyz1 MetricRow
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = MetricRow{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []MetricRow{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
